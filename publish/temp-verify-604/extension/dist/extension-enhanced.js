(()=>{"use strict";var __webpack_modules__={55:function(e,n,t){var o=this&&this.__createBinding||(Object.create?function(e,n,t,o){void 0===o&&(o=t);var r=Object.getOwnPropertyDescriptor(n,t);r&&!("get"in r?!n.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,o,r)}:function(e,n,t,o){void 0===o&&(o=t),e[o]=n[t]}),r=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&o(n,e,t);return r(n,e),n};Object.defineProperty(n,"__esModule",{value:!0}),n.deactivate=n.activate=void 0;const s=a(t(398)),i=t(976),l=t(579),c=t(527),d=t(411),v=t(182),m=t(149);let p,g,u,h,w,f;n.activate=function(e){console.log("TBX Live Server extension is now active!"),console.log("[Extension] Starting enhanced command manager...");try{w=new v.CommunicationManager,f=new m.ErrorRecoveryManager,p=new i.CommandManagerEnhanced(w,f),g=new l.WebviewPanelProvider(e.extensionUri),u=new c.StatusBarManager,h=new d.LiveReloadManager(w,f),console.log("[Extension] Registering commands...");const n=[s.commands.registerCommand("extension.liveServer.goOffline",()=>{console.log("[Extension] Executing command: extension.liveServer.goOffline"),p.executeCommand("goOffline")}),s.commands.registerCommand("extension.liveServer.goOnline",e=>{console.log("[Extension] Executing command: extension.liveServer.goOnline",e?`with URI: ${e.fsPath}`:"without URI"),p.executeCommand("goOnline",e)}),s.commands.registerCommand("extension.liveServer.showFileBrowser",()=>{console.log("[Extension] Executing command: extension.liveServer.showFileBrowser"),p.executeCommand("showFileBrowser")}),s.commands.registerCommand("extension.liveServer.changeWorkspace",()=>{console.log("[Extension] Executing command: extension.liveServer.changeWorkspace"),p.executeCommand("changeWorkspace")}),s.commands.registerCommand("extension.liveServer.startWebview",()=>{console.log("[Extension] Executing command: extension.liveServer.startWebview"),p.executeCommand("startWebview")}),s.commands.registerCommand("extension.liveServer.navigateHome",()=>{console.log("[Extension] Executing command: extension.liveServer.navigateHome"),p.executeCommand("navigateHome")}),s.commands.registerCommand("extension.liveServer.zoomIn",()=>{console.log("[Extension] Executing command: extension.liveServer.zoomIn"),p.executeCommand("zoomIn")}),s.commands.registerCommand("extension.liveServer.zoomOut",()=>{console.log("[Extension] Executing command: extension.liveServer.zoomOut"),p.executeCommand("zoomOut")}),s.commands.registerCommand("extension.liveServer.resetZoom",()=>{console.log("[Extension] Executing command: extension.liveServer.resetZoom"),p.executeCommand("resetZoom")}),s.commands.registerCommand("extension.liveServer.toggleSplitView",()=>{console.log("[Extension] Executing command: extension.liveServer.toggleSplitView"),p.executeCommand("toggleSplitView")}),s.commands.registerCommand("extension.liveServer.toggleFullScreen",()=>{console.log("[Extension] Executing command: extension.liveServer.toggleFullScreen"),p.executeCommand("toggleFullScreen")}),s.commands.registerCommand("extension.liveServer.openDevTools",()=>{console.log("[Extension] Executing command: extension.liveServer.openDevTools"),p.executeCommand("openDevTools")}),s.commands.registerCommand("extension.liveServer.inspectElement",()=>{console.log("[Extension] Executing command: extension.liveServer.inspectElement"),p.executeCommand("inspectElement")}),s.commands.registerCommand("extension.liveServer.viewSource",()=>{console.log("[Extension] Executing command: extension.liveServer.viewSource"),p.executeCommand("viewSource")}),s.commands.registerCommand("extension.liveServer.clearHistory",()=>{console.log("[Extension] Executing command: extension.liveServer.clearHistory"),p.executeCommand("clearHistory")}),s.commands.registerCommand("extension.liveServer.saveState",()=>{console.log("[Extension] Executing command: extension.liveServer.saveState"),p.executeCommand("saveState")}),s.commands.registerCommand("extension.liveServer.loadState",()=>{console.log("[Extension] Executing command: extension.liveServer.loadState"),p.executeCommand("loadState")})];n.forEach((t,o)=>{try{e.subscriptions.push(t),console.log(`[Extension] Command ${o+1}/${n.length} registered successfully`)}catch(e){console.error(`[Extension] Failed to register command ${o+1}:`,e),s.window.showErrorMessage(`Failed to register command: ${e}`)}}),console.log(`[Extension] All ${n.length} commands registered successfully`),u.initialize(),e.subscriptions.push(s.window.registerWebviewPanelSerializer("tbxLivePreview",g)),w.initialize(),f.initialize(),console.log("[Extension] Inline Live Server extension activated successfully!")}catch(e){console.error("[Extension] Error during activation:",e),s.window.showErrorMessage(`Extension activation failed: ${e}`)}},n.deactivate=function(){console.log("[Extension] TBX Live Server extension is now deactivated!");try{h&&h.dispose(),w&&w.dispose(),f&&f.dispose(),u&&u.dispose(),p&&p.dispose(),console.log("[Extension] Cleanup completed successfully")}catch(e){console.error("[Extension] Error during deactivation:",e)}}},149:function(e,n,t){var o=this&&this.__createBinding||(Object.create?function(e,n,t,o){void 0===o&&(o=t);var r=Object.getOwnPropertyDescriptor(n,t);r&&!("get"in r?!n.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,o,r)}:function(e,n,t,o){void 0===o&&(o=t),e[o]=n[t]}),r=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&o(n,e,t);return r(n,e),n};Object.defineProperty(n,"__esModule",{value:!0}),n.ErrorRecoveryManager=void 0;const s=a(t(398));n.ErrorRecoveryManager=class{constructor(){this.disposables=[],this.retryAttempts=new Map,this.maxRetries=3}initialize(){s.workspace.onDidChangeConfiguration(e=>{e.affectsConfiguration("tbxLivePreview.development")&&this.handleConfigurationChange()},null,this.disposables)}handleError(e,n){console.error(`Error in ${n}:`,e),this.logError(e,n),this.shouldAttemptRecovery(n)?this.attemptRecovery(n):this.showErrorToUser(e,n)}handleCommunicationError(e){const n=e,t=new Error(n.payload?.message||"Communication error");this.handleError(t,"communication")}logError(e,n){const t=`[${(new Date).toISOString()}] Error in ${n}: ${e.message}`,o=s.workspace.getConfiguration("tbxLivePreview.development").get("logLevel","info");"debug"!==o&&"info"!==o||(console.error(t),e.stack&&console.error(e.stack))}shouldAttemptRecovery(e){return(this.retryAttempts.get(e)||0)<this.maxRetries}attemptRecovery(e){const n=this.retryAttempts.get(e)||0;switch(this.retryAttempts.set(e,n+1),console.log(`Attempting recovery for ${e} (attempt ${n+1}/${this.maxRetries})`),e){case"server":this.recoverServer();break;case"webview":this.recoverWebview();break;case"communication":this.recoverCommunication();break;default:console.log(`No recovery strategy for context: ${e}`)}}recoverServer(){s.commands.executeCommand("extension.liveServer.goOnline")}recoverWebview(){s.commands.executeCommand("extension.liveServer.startWebview")}recoverCommunication(){s.window.showInformationMessage("Attempting to restore communication...")}showErrorToUser(e,n){const t=`Inline Live Server: Error in ${n} - ${e.message}`;s.window.showErrorMessage(t,"Retry","Show Details").then(t=>{"Retry"===t?(this.retryAttempts.delete(n),this.attemptRecovery(n)):"Show Details"===t&&this.showErrorDetails(e,n)})}showErrorDetails(e,n){const t=`Context: ${n}\nMessage: ${e.message}\nStack: ${e.stack||"No stack trace"}`;s.workspace.openTextDocument({content:t,language:"log"}).then(e=>{s.window.showTextDocument(e)})}handleConfigurationChange(){const e=s.workspace.getConfiguration("tbxLivePreview.development");this.maxRetries=e.get("maxRetries",3)}resetRetryAttempts(e){this.retryAttempts.delete(e)}dispose(){this.retryAttempts.clear(),this.disposables.forEach(e=>e.dispose()),this.disposables=[]}}},182:function(e,n,t){var o=this&&this.__createBinding||(Object.create?function(e,n,t,o){void 0===o&&(o=t);var r=Object.getOwnPropertyDescriptor(n,t);r&&!("get"in r?!n.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,o,r)}:function(e,n,t,o){void 0===o&&(o=t),e[o]=n[t]}),r=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&o(n,e,t);return r(n,e),n};Object.defineProperty(n,"__esModule",{value:!0}),n.CommunicationManager=void 0;const s=a(t(398));n.CommunicationManager=class{constructor(){this.disposables=[],this.messageHandlers=new Map}initialize(){this.registerMessageHandler("serverStatus",this.handleServerStatus.bind(this)),this.registerMessageHandler("navigation",this.handleNavigation.bind(this)),this.registerMessageHandler("error",this.handleError.bind(this))}registerMessageHandler(e,n){this.messageHandlers.set(e,n)}unregisterMessageHandler(e){this.messageHandlers.delete(e)}sendMessage(e){const n=this.messageHandlers.get(e.type);n&&n(e)}broadcastMessage(e){this.messageHandlers.forEach(n=>{try{n(e)}catch(e){console.error("Error in message handler:",e)}})}handleServerStatus(e){const n=e;console.log("Server status:",n.payload?.status);const t=n.payload?.status;"running"===t?s.window.showInformationMessage("Server is running"):"stopped"===t?s.window.showInformationMessage("Server stopped"):"error"===t&&s.window.showErrorMessage("Server error occurred")}handleNavigation(e){const n=e;console.log("Navigation:",n.payload?.action)}handleError(e){const n=e;console.error("Communication error:",n.payload?.message),s.window.showErrorMessage(`Communication error: ${n.payload?.message}`)}dispose(){this.messageHandlers.clear(),this.disposables.forEach(e=>e.dispose()),this.disposables=[]}}},398:e=>{e.exports=require("vscode")},411:function(e,n,t){var o=this&&this.__createBinding||(Object.create?function(e,n,t,o){void 0===o&&(o=t);var r=Object.getOwnPropertyDescriptor(n,t);r&&!("get"in r?!n.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,o,r)}:function(e,n,t,o){void 0===o&&(o=t),e[o]=n[t]}),r=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&o(n,e,t);return r(n,e),n};Object.defineProperty(n,"__esModule",{value:!0}),n.LiveReloadManager=void 0;const s=a(t(398));n.LiveReloadManager=class{constructor(e,n){this.communicationManager=e,this.errorRecoveryManager=n,this.disposables=[],this.fileWatcher=null,this.isEnabled=!1,this.commandManager=null}setCommandManager(e){this.commandManager=e}initialize(){this.setupFileWatcher(),s.workspace.onDidChangeConfiguration(e=>{e.affectsConfiguration("liveServer.settings")&&this.handleConfigurationChange()},null,this.disposables),this.isEnabled=!0}setupFileWatcher(){this.fileWatcher=s.workspace.createFileSystemWatcher("**/*.{html,css,js,ts,jsx,tsx,json,md}"),this.fileWatcher.onDidChange(e=>this.handleFileChange(e,"changed"),null,this.disposables),this.fileWatcher.onDidCreate(e=>this.handleFileChange(e,"created"),null,this.disposables),this.fileWatcher.onDidDelete(e=>this.handleFileChange(e,"deleted"),null,this.disposables)}handleFileChange(e,n){if(!this.isEnabled)return;const t=s.workspace.getConfiguration("liveServer.settings").get("ignoreFiles",[]),o=s.workspace.asRelativePath(e);if(!t.some(e=>o.includes(e.replace("**","")))){if(this.commandManager)this.commandManager.sendFileChangeMessage(o,n);else{const e={type:"fileChange",payload:{file:o,changeType:n,timestamp:Date.now()}};this.communicationManager.sendMessage(e)}this.triggerLiveReload()}}triggerLiveReload(){if(this.commandManager)this.commandManager.sendLiveReloadMessage();else{const e={type:"liveReload",payload:{action:"reload",timestamp:Date.now()}};this.communicationManager.sendMessage(e)}}handleConfigurationChange(){s.workspace.getConfiguration("liveServer.settings").get("fullReload",!1)&&this.triggerLiveReload()}setEnabled(e){this.isEnabled=e}isLiveReloadEnabled(){return this.isEnabled}dispose(){this.isEnabled=!1,this.fileWatcher&&(this.fileWatcher.dispose(),this.fileWatcher=null),this.disposables.forEach(e=>e.dispose()),this.disposables=[]}}},527:function(e,n,t){var o=this&&this.__createBinding||(Object.create?function(e,n,t,o){void 0===o&&(o=t);var r=Object.getOwnPropertyDescriptor(n,t);r&&!("get"in r?!n.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,o,r)}:function(e,n,t,o){void 0===o&&(o=t),e[o]=n[t]}),r=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&o(n,e,t);return r(n,e),n};Object.defineProperty(n,"__esModule",{value:!0}),n.StatusBarManager=void 0;const s=a(t(398));n.StatusBarManager=class{constructor(){this.serverState="stopped",this.statusBarItem=s.window.createStatusBarItem(s.StatusBarAlignment.Left,100)}initialize(){this.statusBarItem.command="extension.liveServer.showFileBrowser",this.updateServerState(this.serverState),this.statusBarItem.show()}updateServerState(e,n=0){switch(this.serverState=e,e){case"stopped":this.statusBarItem.text="$(circle-slash) TBX Live Server",this.statusBarItem.tooltip="TBX Live Server - Click to browse files",this.statusBarItem.command="extension.liveServer.showFileBrowser",this.statusBarItem.backgroundColor=void 0;break;case"running":n>1?(this.statusBarItem.text=`$(broadcast) TBX Live Server (${n})`,this.statusBarItem.tooltip=`${n} TBX Live Server servers running`):(this.statusBarItem.text="$(circle-filled) TBX Live Server",this.statusBarItem.tooltip="TBX Live Server - Server running"),this.statusBarItem.command="extension.liveServer.goOffline",this.statusBarItem.backgroundColor=new s.ThemeColor("statusBarItem.prominentBackground");break;case"error":this.statusBarItem.text="$(error) TBX Live Server",this.statusBarItem.tooltip="TBX Live Server - Server error, click to browse files",this.statusBarItem.command="extension.liveServer.showFileBrowser",this.statusBarItem.backgroundColor=new s.ThemeColor("statusBarItem.errorBackground")}}getServerState(){return this.serverState}dispose(){this.statusBarItem&&this.statusBarItem.dispose()}}},579:function(e,n,t){var o=this&&this.__createBinding||(Object.create?function(e,n,t,o){void 0===o&&(o=t);var r=Object.getOwnPropertyDescriptor(n,t);r&&!("get"in r?!n.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,o,r)}:function(e,n,t,o){void 0===o&&(o=t),e[o]=n[t]}),r=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&o(n,e,t);return r(n,e),n};Object.defineProperty(n,"__esModule",{value:!0}),n.WebviewPanelProvider=void 0;const s=a(t(398));n.WebviewPanelProvider=class{constructor(e){this.extensionUri=e,this.panels=new Map}async deserializeWebviewPanel(e,n){this.panels.set(e.viewColumn?.toString()||"main",e),this.setupWebviewPanel(e,n)}createWebviewPanel(e=s.ViewColumn.One,n=!1){const t=s.window.createWebviewPanel("tbxLivePreview","Inline Live Server",e,{enableScripts:!0,retainContextWhenHidden:!0,enableFindWidget:!0,localResourceRoots:[this.extensionUri]});return this.panels.set(e.toString(),t),this.setupWebviewPanel(t),t}setupWebviewPanel(e,n){e.webview.html=this.getWebviewContent(),e.onDidDispose(()=>{this.panels.delete(e.viewColumn?.toString()||"main")}),e.onDidChangeViewState(()=>{}),e.webview.onDidReceiveMessage(n=>{this.handleWebviewMessage(n,e)})}getWebviewContent(){return'<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <title>TBX Live Server</title>\n    <style>\n        body {\n            margin: 0;\n            padding: 0;\n            font-family: var(--vscode-font-family);\n            font-size: var(--vscode-font-size);\n            background-color: var(--vscode-editor-background);\n            color: var(--vscode-editor-foreground);\n            height: 100vh;\n        }\n        .container {\n            display: flex;\n            flex-direction: column;\n            height: 100vh;\n        }\n        .toolbar {\n            display: flex;\n            align-items: center;\n            gap: 12px;\n            padding: 12px 16px;\n            background: linear-gradient(135deg, var(--vscode-editorWidget-background) 0%, var(--vscode-sideBar-background) 100%);\n            border-bottom: 1px solid var(--vscode-panel-border);\n            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n            min-height: 56px;\n        }\n        .address-bar {\n            flex: 1;\n            padding: 8px 12px;\n            background-color: var(--vscode-input-background);\n            color: var(--vscode-input-foreground);\n            border: 1px solid var(--vscode-input-border);\n            border-radius: 6px;\n            font-family: var(--vscode-editor-font-family);\n            font-size: 13px;\n            transition: all 0.2s ease;\n        }\n        .address-bar:focus {\n            outline: none;\n            border-color: var(--vscode-focusBorder);\n            box-shadow: 0 0 0 2px var(--vscode-focusBorder);\n        }\n        .toolbar button {\n            padding: 8px 16px;\n            background-color: var(--vscode-button-background);\n            color: var(--vscode-button-foreground);\n            border: none;\n            border-radius: 6px;\n            cursor: pointer;\n            font-size: 13px;\n            font-weight: 500;\n            font-family: var(--vscode-font-family);\n            transition: all 0.2s ease;\n            min-height: 32px;\n        }\n        .toolbar button:hover {\n            background-color: var(--vscode-button-hoverBackground);\n            transform: translateY(-1px);\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n        }\n        .toolbar button:active {\n            transform: translateY(0);\n            box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);\n        }\n        .content {\n            flex: 1;\n            background-color: var(--vscode-editorWidget-background);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            padding: 40px;\n            text-align: center;\n        }\n        .content p {\n            color: var(--vscode-descriptionForeground);\n            font-size: 14px;\n            line-height: 1.5;\n            margin: 8px 0;\n        }\n        .status-bar {\n            padding: 8px 16px;\n            background-color: var(--vscode-statusBar-background);\n            color: var(--vscode-statusBar-foreground);\n            font-size: 12px;\n            border-top: 1px solid var(--vscode-panel-border);\n            display: flex;\n            align-items: center;\n            gap: 8px;\n        }\n        .status-indicator {\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            background-color: var(--vscode-charts-green);\n        }\n    </style>\n</head>\n<body>\n    <div class="container">\n        <div class="toolbar">\n            <input type="text" class="address-bar" placeholder="Enter URL or file path..." />\n            <button onclick="navigateHome()">Home</button>\n            <button onclick="refresh()">Refresh</button>\n            <button onclick="toggleDevTools()">Dev Tools</button>\n        </div>\n        <div class="content" id="content">\n            <p>TBX Live Server Panel</p>\n            <p>Server will start when you open a file or use the command palette.</p>\n        </div>\n        <div class="status-bar" id="status-bar">\n            <div class="status-indicator"></div>\n            <span>Ready</span>\n        </div>\n    </div>\n\n    <script>\n        const vscode = acquireVsCodeApi();\n        const content = document.getElementById(\'content\');\n        const statusBar = document.getElementById(\'status-bar\');\n        const addressBar = document.querySelector(\'.address-bar\');\n\n        // Handle messages from extension\n        window.addEventListener(\'message\', event => {\n            const message = event.data;\n            switch (message.type) {\n                case \'update\':\n                    content.innerHTML = message.html || message.text || \'No content\';\n                    break;\n                case \'navigate\':\n                    if (message.url) {\n                        addressBar.value = message.url;\n                    }\n                    break;\n                case \'status\':\n                    statusBar.textContent = message.text || \'Ready\';\n                    break;\n            }\n        });\n\n        function navigateHome() {\n            vscode.postMessage({ type: \'navigateHome\' });\n        }\n\n        function refresh() {\n            vscode.postMessage({ type: \'refresh\' });\n        }\n\n        function toggleDevTools() {\n            vscode.postMessage({ type: \'toggleDevTools\' });\n        }\n\n        addressBar.addEventListener(\'keypress\', (e) => {\n            if (e.key === \'Enter\') {\n                vscode.postMessage({\n                    type: \'navigate\',\n                    url: addressBar.value\n                });\n            }\n        });\n    <\/script>\n</body>\n</html>'}handleWebviewMessage(e,n){switch(e.type){case"navigateHome":s.commands.executeCommand("extension.liveServer.navigateHome");break;case"refresh":s.commands.executeCommand("extension.liveServer.goOnline");break;case"toggleDevTools":s.commands.executeCommand("extension.liveServer.openDevTools");break;case"navigate":e.url&&console.log("Navigate to:",e.url)}}getPanel(e){return this.panels.get(e.toString())}dispose(){this.panels.forEach(e=>e.dispose()),this.panels.clear()}}},902:e=>{e.exports=require("live-server")},928:e=>{e.exports=require("path")},976:function(__unused_webpack_module,exports,__webpack_require__){var __createBinding=this&&this.__createBinding||(Object.create?function(e,n,t,o){void 0===o&&(o=t);var r=Object.getOwnPropertyDescriptor(n,t);r&&!("get"in r?!n.__esModule:r.writable||r.configurable)||(r={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,o,r)}:function(e,n,t,o){void 0===o&&(o=t),e[o]=n[t]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&__createBinding(n,e,t);return __setModuleDefault(n,e),n};Object.defineProperty(exports,"__esModule",{value:!0}),exports.CommandManagerEnhanced=void 0;const path=__importStar(__webpack_require__(928)),vscode=__importStar(__webpack_require__(398)),statusBarManager_1=__webpack_require__(527),liveReloadManager_1=__webpack_require__(411);class CommandManagerEnhanced{constructor(e,n){this.previewPanel=null,this.servers=[],this.activeServerId=null,this.targetFilePath=null,this.statusBarManager=new statusBarManager_1.StatusBarManager,this.communicationManager=e,this.errorRecoveryManager=n,this.liveReloadManager=new liveReloadManager_1.LiveReloadManager(e,n),this.liveReloadManager.setCommandManager(this)}executeCommand(e,n){console.log(`[CommandManager] Executing command: ${e}`,n?`with URI: ${n.fsPath}`:"without URI");try{switch(e){case"goOffline":this.goOffline();break;case"goOnline":this.goOnline(n);break;case"showFileBrowser":this.showFileBrowser();break;case"changeWorkspace":this.changeWorkspace();break;case"startWebview":this.startWebview();break;case"navigateHome":this.navigateHome();break;case"zoomIn":this.zoomIn();break;case"zoomOut":this.zoomOut();break;case"resetZoom":this.resetZoom();break;case"toggleSplitView":this.toggleSplitView();break;case"toggleFullScreen":this.toggleFullScreen();break;case"openDevTools":this.openDevTools();break;case"inspectElement":this.inspectElement();break;case"viewSource":this.viewSource();break;case"clearHistory":this.clearHistory();break;case"saveState":this.saveState();break;case"loadState":this.loadState();break;default:console.error(`[CommandManager] Unknown command: ${e}`),vscode.window.showErrorMessage(`Unknown command: ${e}`)}}catch(n){console.error(`[CommandManager] Error executing command ${e}:`,n),vscode.window.showErrorMessage(`Error executing command: ${n}`)}}async goOffline(){if(console.log("[CommandManager] Stopping server..."),0!==this.servers.length)try{let e=[];if(1===this.servers.length)e=[this.servers[0].id];else{const n=this.servers.map(e=>({label:`${e.workspaceName} (${e.port})`,description:e.rootPath,server:e}));n.push({label:"Stop All Servers",description:"Terminate every running TBX Live Server server",server:null});const t=await vscode.window.showQuickPick(n,{placeHolder:"Select TBX Live Server server to stop"});if(!t)return;e=t.server?[t.server.id]:this.servers.map(e=>e.id)}this.stopServers(e)}catch(e){console.error("[CommandManager] Error stopping server:",e),vscode.window.showErrorMessage(`Error stopping server: ${e}`)}else vscode.window.showInformationMessage("TBX Live Server: No servers are currently running")}goOnline(e){console.log("[CommandManager] Starting server...",e?`for file: ${e.fsPath}`:"");try{let n,t=null;if(e?(n=vscode.workspace.getWorkspaceFolder(e),n&&(t=path.relative(n.uri.fsPath,e.fsPath).replace(/\\/g,"/"),console.log(`[CommandManager] Target file: ${t}`))):n=this.resolveWorkspaceFolder(),!n)return void vscode.window.showErrorMessage("TBX Live Server: No workspace folder found");this.targetFilePath=t;const o=this.servers.find(e=>e.id===n.uri.fsPath);if(o)return this.activeServerId=o.id,vscode.window.showWarningMessage(`TBX Live Server: Server is already running on port ${o.port}`),this.updatePreviewPanel(),void this.startWebview();const r=vscode.workspace.getConfiguration("tbxLivePreview.server").get("customPort",5501),a=this.findAvailablePort(r),s=this.startLiveServer(n.uri.fsPath,a),i={id:n.uri.fsPath,rootPath:n.uri.fsPath,workspaceName:n.name,port:a,process:s};this.servers.push(i),this.activeServerId=i.id,this.updateStatusBar(),this.communicationManager.sendMessage({type:"serverStatus",payload:{status:"running",port:a,url:`http://localhost:${a}`}}),this.startWebview(),this.liveReloadManager.initialize();const l=[`TBX Live Server: Server started for ${n.name} on port ${a}`,`TBX Live Server: Server started for ${n.name} on port ${a}`,`TBX Live Server: Server started for ${n.name} on port ${a}`,`TBX Live Server: Server started for ${n.name} on port ${a}`,`TBX Live Server: Server started for ${n.name} on port ${a} • Enjoying the extension? ☕ Support development: https://buymeacoffee.com/th3mailman`],c=l[Math.floor(Math.random()*l.length)];vscode.window.showInformationMessage(c),console.log(`[CommandManager] Server started successfully on port ${a}`)}catch(e){console.error("[CommandManager] Error starting server:",e),vscode.window.showErrorMessage(`Error starting server: ${e}`),this.updateStatusBar(!0)}}async showFileBrowser(){console.log("[CommandManager] Showing file browser...");try{const e=this.resolveWorkspaceFolder();if(!e)return void vscode.window.showErrorMessage("TBX Live Server: No workspace folder found");const n=await vscode.workspace.findFiles(new vscode.RelativePattern(e,"**/*.{html,htm}"),"**/node_modules/**",50);if(0===n.length)return void vscode.window.showInformationMessage("No HTML files found in the workspace");const t=n.map(e=>{const n=vscode.workspace.asRelativePath(e,!1);return{label:path.basename(e.fsPath),description:n,detail:e.fsPath,uri:e}}),o=await vscode.window.showQuickPick(t,{placeHolder:"Select an HTML file to serve",matchOnDescription:!0,matchOnDetail:!0});o&&(console.log(`[CommandManager] User selected file: ${o.uri.fsPath}`),this.goOnline(o.uri))}catch(e){console.error("[CommandManager] Error showing file browser:",e),vscode.window.showErrorMessage(`Error showing file browser: ${e}`)}}loadLiveServerModule(){try{const e=__webpack_require__(902);if(e&&"function"==typeof e.start)return console.log("[CommandManager] Live-server module loaded from node_modules"),e;console.warn("[CommandManager] Live-server module from node_modules missing start method")}catch(e){console.warn(`[CommandManager] Failed to load live-server from node_modules: ${e}`)}const bundledModulePath=path.join(__dirname,"..","lib","live-server"),dynamicRequire=eval("require");try{const e=dynamicRequire(bundledModulePath);if(e&&"function"==typeof e.start)return console.log("[CommandManager] Live-server module loaded from bundled fallback"),e;console.warn("[CommandManager] Bundled live-server module missing start method")}catch(e){console.warn(`[CommandManager] Failed to load bundled live-server module: ${e}`)}throw new Error("Unable to locate live-server module with start method")}startLiveServer(e,n){console.log(`[CommandManager] Starting live server on path: ${e}, port: ${n}`);try{const t=this.loadLiveServerModule(),o={port:n,host:"127.0.0.1",root:e,open:!1,wait:100,logLevel:2,middleware:[(e,n,t)=>{console.log(`[LiveServer] ${e.method} ${e.url}`),t()}]};console.log("[CommandManager] Starting live-server with params:",o),t.start(o);const r={kill:()=>{try{t.shutdown&&"function"==typeof t.shutdown&&t.shutdown()}catch(e){console.error("[CommandManager] Error shutting down live-server:",e)}}};return console.log("[CommandManager] Live server started successfully"),r}catch(e){throw console.error("[CommandManager] Error starting live-server:",e),new Error(`Failed to start live server: ${e}`)}}changeWorkspace(){console.log("[CommandManager] Changing workspace..."),vscode.window.showWorkspaceFolderPick().then(e=>{e&&(vscode.window.showInformationMessage(`TBX Live Server: Workspace changed to ${e.name}`),console.log(`[CommandManager] Workspace changed to: ${e.name}`))})}startWebview(){console.log("[CommandManager] Ensuring webview is visible...");try{const e=this.previewPanel;if(e)return e.reveal(vscode.ViewColumn.Two),this.updatePreviewPanel(),void console.log("[CommandManager] Webview panel revealed and updated");const n=vscode.window.createWebviewPanel("tbxLivePreview","TBX Live Server",vscode.ViewColumn.Two,{enableScripts:!0,retainContextWhenHidden:!0,enableFindWidget:!0});this.previewPanel=n,n.onDidDispose(()=>{this.previewPanel=null}),n.webview.onDidReceiveMessage(e=>{const n=e?.serverId??this.activeServerId;switch(e.command){case"startServer":this.goOnline();break;case"stopServer":n?this.stopServers([n]):vscode.window.showInformationMessage("TBX Live Server: No server selected to stop");break;case"openInBrowser":{const e=this.getServerById(n);if(e){const n=vscode.Uri.parse(`http://127.0.0.1:${e.port}`);vscode.env.openExternal(n)}else vscode.window.showInformationMessage("TBX Live Server: Server is not running")}break;case"refresh":this.updatePreviewPanel();break;case"selectServer":n&&this.getServerById(n)&&(this.activeServerId=n,this.updatePreviewPanel())}}),this.updatePreviewPanel(),vscode.window.showInformationMessage("TBX Live Server: Webview opened"),console.log("[CommandManager] Webview started successfully")}catch(e){console.error("[CommandManager] Error starting webview:",e),vscode.window.showErrorMessage(`Error starting webview: ${e}`)}}updatePreviewPanel(){this.previewPanel&&(this.previewPanel.webview.html=this.getWebviewContent())}sendLiveReloadMessage(){this.previewPanel&&this.previewPanel.webview.postMessage({type:"liveReload",payload:{action:"reload",timestamp:Date.now()}})}sendFileChangeMessage(e,n){this.previewPanel&&this.previewPanel.webview.postMessage({type:"fileChange",payload:{file:e,changeType:n,timestamp:Date.now()}})}resolveWorkspaceFolder(){const e=vscode.window.activeTextEditor;if(e){const n=vscode.workspace.getWorkspaceFolder(e.document.uri);if(n)return n}return vscode.workspace.workspaceFolders?.[0]}findAvailablePort(e){const n=new Set(this.servers.map(e=>e.port));let t=e;for(;n.has(t);)t+=1;return t}getServerById(e){if(e)return this.servers.find(n=>n.id===e)}updateStatusBar(e=!1){e?this.statusBarManager.updateServerState("error"):0===this.servers.length?this.statusBarManager.updateServerState("stopped"):this.statusBarManager.updateServerState("running",this.servers.length)}escapeHtml(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;")}escapeHtmlAttribute(e){return this.escapeHtml(e)}stopServers(e,n={}){if(0===e.length)return;const t=Array.from(new Set(e)),o=[],r=Boolean(n.silent);for(const e of t){const n=this.servers.find(n=>n.id===e);if(n)try{n.process.kill(),o.push(n)}catch(e){console.error("[CommandManager] Error shutting down server:",e)}}this.servers=this.servers.filter(e=>!t.includes(e.id)),this.activeServerId&&t.includes(this.activeServerId)&&(this.activeServerId=this.servers[0]?.id??null);for(const e of o)this.communicationManager.sendMessage({type:"serverStatus",payload:{status:"stopped",port:e.port}}),r||vscode.window.showInformationMessage(`TBX Live Server: Server stopped for ${e.workspaceName} (${e.port})`);0===this.servers.length&&this.liveReloadManager.setEnabled(!1),this.updateStatusBar(),this.updatePreviewPanel(),console.log("[CommandManager] Server stop sequence complete")}getWebviewContent(){const e=this.servers.map(e=>({id:e.id,label:`${e.workspaceName} (${e.port})`,port:e.port,url:`http://127.0.0.1:${e.port}`,rootPath:e.rootPath})),n=this.getServerById(this.activeServerId??void 0),t=Boolean(n);let o="";t&&n?.port&&(o=`http://127.0.0.1:${n.port}`,this.targetFilePath&&(o+=`/${this.targetFilePath}`));const r=t?`Server running at ${o||"Unknown port"}`:"Server is stopped",a=n?.port??"—",s=t?`<div class="preview-container">\n           <iframe id="previewFrame" src="${o}" class="preview-frame auto-fit" sandbox="allow-scripts allow-same-origin allow-forms allow-popups allow-popups-to-escape-sandbox"></iframe>\n         </div>`:'<div class="placeholder">\n           <div class="placeholder-icon">🚀</div>\n           <p><strong>Ready to Launch</strong></p>\n           <p>Click "Start" to begin serving your files and see the live preview here.</p>\n         </div>',i=e.map(e=>{const n=e.id===this.activeServerId?"selected":"";return`<option value="${this.escapeHtmlAttribute(e.id)}" ${n}>${this.escapeHtml(e.label)}</option>`}).join("");return`\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset="UTF-8">\n        <meta name="viewport" content="width=device-width, initial-scale=1.0">\n        <title>TBX Live Server</title>\n        <style>\n          body {\n            margin: 0;\n            font-family: var(--vscode-font-family);\n            font-size: var(--vscode-font-size);\n            background-color: var(--vscode-editor-background);\n            color: var(--vscode-editor-foreground);\n            display: flex;\n            flex-direction: column;\n            height: 100vh;\n          }\n\n          header {\n            display: grid;\n            grid-template-columns: auto 1fr auto auto;\n            grid-template-areas: "status controls actions toggle";\n            align-items: center;\n            padding: 12px 16px;\n            background: linear-gradient(135deg, var(--vscode-editorWidget-background) 0%, var(--vscode-sideBar-background) 100%);\n            border-bottom: 1px solid var(--vscode-panel-border);\n            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n            gap: 16px;\n            min-height: 56px;\n            transition: all 0.3s ease;\n            overflow: hidden;\n          }\n\n          header.collapsed {\n            grid-template-columns: auto 1fr auto;\n            grid-template-areas: "status-minimal . toggle";\n            min-height: 40px;\n            padding: 8px 16px;\n          }\n\n          .status {\n            grid-area: status;\n            display: flex;\n            flex-direction: column;\n            gap: 4px;\n            font-size: 12px;\n            min-width: 200px;\n            transition: all 0.3s ease;\n          }\n\n          .status strong {\n            font-size: 14px;\n            font-weight: 600;\n            color: var(--vscode-textLink-foreground);\n            display: flex;\n            align-items: center;\n            gap: 8px;\n          }\n\n          .status-minimal {\n            grid-area: status-minimal;\n            display: none;\n            align-items: center;\n            gap: 8px;\n            font-size: 13px;\n            font-weight: 500;\n            color: var(--vscode-textLink-foreground);\n          }\n\n          .minimal-actions {\n            display: none;\n            align-items: center;\n            gap: 4px;\n            margin-left: 12px;\n          }\n\n          .minimal-action-btn {\n            width: 24px;\n            height: 24px;\n            background-color: var(--vscode-button-background);\n            color: var(--vscode-button-foreground);\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 11px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            transition: all 0.2s ease;\n          }\n\n          .minimal-action-btn:hover {\n            background-color: var(--vscode-button-hoverBackground);\n            transform: scale(1.1);\n          }\n\n          .minimal-action-btn:disabled {\n            opacity: 0.5;\n            cursor: not-allowed;\n            transform: none;\n          }\n\n          header.collapsed .status {\n            display: none;\n          }\n\n          header.collapsed .status-minimal {\n            display: flex;\n          }\n\n          header.collapsed .minimal-actions {\n            display: flex;\n          }\n\n          .status-indicator {\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            background-color: var(--vscode-charts-green);\n            box-shadow: 0 0 4px rgba(0, 255, 0, 0.3);\n            animation: pulse 2s infinite;\n          }\n\n          .status-indicator.offline {\n            background-color: var(--vscode-errorForeground);\n            box-shadow: 0 0 4px rgba(255, 0, 0, 0.3);\n            animation: none;\n          }\n\n          @keyframes pulse {\n            0%, 100% { opacity: 1; }\n            50% { opacity: 0.6; }\n          }\n\n          .port-info {\n            color: var(--vscode-descriptionForeground);\n            font-family: var(--vscode-editor-font-family);\n          }\n          .controls {\n            grid-area: controls;\n            display: flex;\n            align-items: center;\n            gap: 8px;\n            justify-content: center;\n            transition: all 0.3s ease;\n          }\n\n          header.collapsed .controls {\n            display: none;\n          }\n\n          .server-selector {\n            position: relative;\n            min-width: 200px;\n          }\n\n          .controls select {\n            width: 100%;\n            padding: 8px 12px;\n            background-color: var(--vscode-dropdown-background);\n            color: var(--vscode-dropdown-foreground);\n            border: 1px solid var(--vscode-dropdown-border);\n            border-radius: 6px;\n            font-size: 13px;\n            font-family: var(--vscode-font-family);\n            cursor: pointer;\n            transition: all 0.2s ease;\n          }\n\n          .controls select:hover {\n            border-color: var(--vscode-focusBorder);\n            box-shadow: 0 0 0 1px var(--vscode-focusBorder);\n          }\n\n          .controls select:focus {\n            outline: none;\n            border-color: var(--vscode-focusBorder);\n            box-shadow: 0 0 0 2px var(--vscode-focusBorder);\n          }\n\n          .actions {\n            grid-area: actions;\n            display: flex;\n            gap: 8px;\n            align-items: center;\n            transition: all 0.3s ease;\n          }\n\n          header.collapsed .actions {\n            display: none;\n          }\n\n          .header-toggle {\n            grid-area: toggle;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            width: 32px;\n            height: 32px;\n            background-color: var(--vscode-toolbar-hoverBackground);\n            border: 1px solid var(--vscode-panel-border);\n            border-radius: 6px;\n            cursor: pointer;\n            font-size: 14px;\n            color: var(--vscode-foreground);\n            transition: all 0.2s ease;\n            flex-shrink: 0;\n          }\n\n          .header-toggle:hover {\n            background-color: var(--vscode-toolbar-activeBackground);\n            border-color: var(--vscode-focusBorder);\n            transform: translateY(-1px);\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n          }\n\n          .header-toggle:active {\n            transform: translateY(0);\n            box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);\n          }\n\n          .btn-group {\n            display: flex;\n            gap: 4px;\n            background-color: var(--vscode-toolbar-hoverBackground);\n            border-radius: 8px;\n            padding: 4px;\n          }\n\n          .controls button, .actions button {\n            padding: 8px 16px;\n            background-color: var(--vscode-button-background);\n            color: var(--vscode-button-foreground);\n            border: none;\n            border-radius: 6px;\n            cursor: pointer;\n            font-size: 13px;\n            font-weight: 500;\n            font-family: var(--vscode-font-family);\n            transition: all 0.2s ease;\n            min-height: 32px;\n            display: flex;\n            align-items: center;\n            gap: 6px;\n          }\n\n          .controls button:hover, .actions button:hover {\n            background-color: var(--vscode-button-hoverBackground);\n            transform: translateY(-1px);\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n          }\n\n          .controls button:active, .actions button:active {\n            transform: translateY(0);\n            box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);\n          }\n\n          .controls button:disabled, .actions button:disabled {\n            opacity: 0.5;\n            cursor: not-allowed;\n            transform: none;\n            box-shadow: none;\n          }\n\n          .btn-primary {\n            background-color: var(--vscode-button-background) !important;\n            color: var(--vscode-button-foreground) !important;\n          }\n\n          .btn-secondary {\n            background-color: var(--vscode-button-secondaryBackground) !important;\n            color: var(--vscode-button-secondaryForeground) !important;\n          }\n\n          .btn-danger {\n            background-color: var(--vscode-errorForeground) !important;\n            color: white !important;\n          }\n          .content {\n            flex: 1;\n            background-color: var(--vscode-editorWidget-background);\n            display: flex;\n            position: relative;\n            overflow: hidden;\n          }\n\n          .preview-container {\n            width: 100%;\n            height: 100%;\n            position: relative;\n            overflow: hidden;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n          }\n\n          .preview-frame {\n            border: none;\n            background-color: white;\n            border-radius: 0 0 8px 8px;\n            box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);\n            transform-origin: top left;\n            transition: transform 0.3s ease;\n            position: absolute;\n            top: 0;\n            left: 0;\n          }\n\n          .preview-frame.auto-fit {\n            /* Auto-fit scaling will be applied via JavaScript */\n          }\n\n          .preview-frame.mobile-view {\n            /* Mobile responsive view */\n            max-width: 375px;\n            width: 375px !important;\n          }\n\n          .placeholder {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            height: 100%;\n            color: var(--vscode-descriptionForeground);\n            font-size: 14px;\n            gap: 16px;\n            text-align: center;\n            padding: 40px;\n          }\n\n          .placeholder-icon {\n            font-size: 48px;\n            opacity: 0.5;\n            margin-bottom: 8px;\n          }\n\n          .placeholder p {\n            margin: 0;\n            line-height: 1.5;\n          }\n\n          /* Responsive design for different VS Code panel sizes */\n          @media (max-width: 800px) {\n            header {\n              grid-template-columns: 1fr auto;\n              grid-template-areas:\n                "status toggle"\n                "controls controls"\n                "actions actions";\n              gap: 12px;\n              padding: 12px;\n            }\n\n            header.collapsed {\n              grid-template-columns: 1fr auto;\n              grid-template-areas: "status-minimal toggle";\n              gap: 12px;\n              min-height: 36px;\n            }\n\n            .status {\n              min-width: auto;\n              text-align: left;\n            }\n\n            .controls, .actions {\n              justify-content: center;\n            }\n\n            .server-selector {\n              min-width: 150px;\n            }\n          }\n\n          @media (max-width: 500px) {\n            header {\n              padding: 8px;\n              gap: 8px;\n            }\n\n            header.collapsed {\n              padding: 6px 8px;\n            }\n\n            .controls button, .actions button {\n              padding: 6px 12px;\n              font-size: 12px;\n              min-height: 28px;\n            }\n\n            .btn-group {\n              flex-wrap: wrap;\n            }\n\n            .header-toggle {\n              width: 28px;\n              height: 28px;\n              font-size: 12px;\n            }\n          }\n        </style>\n      </head>\n      <body>\n        <header id="header">\n          <div class="status">\n            <strong>\n              <span class="status-indicator ${t?"":"offline"}"></span>\n              ${r}\n            </strong>\n            <span class="port-info">Port: ${a}</span>\n          </div>\n          <div class="status-minimal">\n            <span class="status-indicator ${t?"":"offline"}"></span>\n            <span>${t?"Running":"Stopped"}</span>\n            <span class="port-info">:${a}</span>\n            <div class="minimal-actions">\n              <button class="minimal-action-btn" onclick="postCommand('${t?"stopServer":"startServer"}')" title="${t?"Stop Server":"Start Server"}">${t?"⏹":"▶"}</button>\n              <button class="minimal-action-btn" onclick="postCommand('refresh')" ${t?"":"disabled"} title="Refresh Preview">🔄</button>\n              <button class="minimal-action-btn" onclick="postCommand('openInBrowser')" ${t?"":"disabled"} title="Open in Browser">🌐</button>\n            </div>\n          </div>\n          <div class="controls">\n            <div class="server-selector">\n              <select id="serverSelect" ${0===e.length?"disabled":""}>\n                ${i||'<option value="" selected>No servers running</option>'}\n              </select>\n            </div>\n          </div>\n          <div class="actions">\n            <div class="btn-group">\n              <button class="btn-primary" onclick="postCommand('${t?"stopServer":"startServer"}')">${t?"⏹ Stop":"▶ Start"}</button>\n              <button class="btn-secondary" onclick="postCommand('refresh')" ${t?"":"disabled"}>🔄 Refresh</button>\n              <button class="btn-secondary" onclick="postCommand('openInBrowser')" ${t?"":"disabled"}>🌐 Browser</button>\n            </div>\n            <div class="btn-group">\n              <button class="btn-secondary" onclick="zoomOut()" title="Zoom Out">🔍-</button>\n              <button class="btn-secondary" onclick="resetZoom()" title="Reset Zoom">🔍</button>\n              <button class="btn-secondary" onclick="zoomIn()" title="Zoom In">🔍+</button>\n              <button class="btn-secondary" onclick="toggleAutoFit()" title="Toggle Auto-Fit" id="autoFitBtn">📱</button>\n            </div>\n          </div>\n          <div class="header-toggle" id="headerToggle" title="Toggle header size">\n            <span id="toggleIcon">▲</span>\n          </div>\n        </header>\n        <div class="content" id="contentContainer">\n          ${s}\n        </div>\n\n        <script>\n          const vscode = acquireVsCodeApi();\n          const servers = ${JSON.stringify(e).replace(/</g,"<")};\n          const activeServerId = ${JSON.stringify(this.activeServerId).replace(/</g,"<")};\n\n          // Get or restore state\n          let state = vscode.getState() || {};\n          const isCollapsed = state.headerCollapsed || false;\n\n          const header = document.getElementById('header');\n          const headerToggle = document.getElementById('headerToggle');\n          const toggleIcon = document.getElementById('toggleIcon');\n          const select = document.getElementById('serverSelect');\n          const contentContainer = document.getElementById('contentContainer');\n          const previewFrame = document.getElementById('previewFrame');\n\n          // Initialize header state\n          if (isCollapsed) {\n            header.classList.add('collapsed');\n            toggleIcon.textContent = '▼';\n            headerToggle.title = 'Expand header';\n          } else {\n            toggleIcon.textContent = '▲';\n            headerToggle.title = 'Collapse header';\n          }\n\n          // Header toggle functionality\n          function toggleHeader() {\n            const collapsed = header.classList.toggle('collapsed');\n            toggleIcon.textContent = collapsed ? '▼' : '▲';\n            headerToggle.title = collapsed ? 'Expand header' : 'Collapse header';\n\n            // Save state\n            state.headerCollapsed = collapsed;\n            vscode.setState(state);\n          }\n\n          headerToggle.addEventListener('click', toggleHeader);\n\n          // Keyboard shortcut for toggle (Ctrl/Cmd + H)\n          document.addEventListener('keydown', (event) => {\n            if ((event.ctrlKey || event.metaKey) && event.key === 'h') {\n              event.preventDefault();\n              toggleHeader();\n            }\n          });\n\n          if (select && activeServerId) {\n            select.value = activeServerId;\n          }\n\n          if (select) {\n            select.addEventListener('change', () => {\n              vscode.postMessage({ command: 'selectServer', serverId: select.value });\n            });\n          }\n\n          function postCommand(command) {\n            const serverId = select ? select.value : null;\n            vscode.postMessage({ command, serverId });\n          }\n\n          // Responsive scaling functionality\n          let currentZoom = 1;\n          let autoFitEnabled = true;\n          const minZoom = 0.1;\n          const maxZoom = 5;\n\n          function calculateAutoFitScale() {\n            if (!previewFrame || !contentContainer) return 1;\n\n            const containerRect = contentContainer.getBoundingClientRect();\n            const containerWidth = containerRect.width;\n            const containerHeight = containerRect.height;\n\n            // Assume standard desktop width for scaling calculation\n            const standardWidth = 1200;\n            const standardHeight = 800;\n\n            // Calculate scale to fit width, with minimum scale for readability\n            const widthScale = Math.max(0.3, containerWidth / standardWidth);\n            const heightScale = Math.max(0.3, containerHeight / standardHeight);\n\n            // Use the smaller scale to ensure content fits in both dimensions\n            return Math.min(widthScale, heightScale);\n          }\n\n          function applyScale(scale) {\n            if (!previewFrame) return;\n\n            const finalScale = autoFitEnabled ? calculateAutoFitScale() * scale : scale;\n            const clampedScale = Math.max(minZoom, Math.min(maxZoom, finalScale));\n\n            // Apply transform\n            previewFrame.style.transform = \`scale(\${clampedScale})\`;\n            previewFrame.style.width = \`\${100 / clampedScale}%\`;\n            previewFrame.style.height = \`\${100 / clampedScale}%\`;\n\n            // Center the scaled content\n            const container = previewFrame.parentElement;\n            if (container) {\n              container.style.overflow = clampedScale < 1 ? 'hidden' : 'auto';\n            }\n          }\n\n          function toggleAutoFit() {\n            autoFitEnabled = !autoFitEnabled;\n            applyScale(currentZoom);\n          }\n\n          function zoomIn() {\n            currentZoom = Math.min(maxZoom, currentZoom * 1.2);\n            applyScale(currentZoom);\n          }\n\n          function zoomOut() {\n            currentZoom = Math.max(minZoom, currentZoom / 1.2);\n            applyScale(currentZoom);\n          }\n\n          function resetZoom() {\n            currentZoom = 1;\n            applyScale(currentZoom);\n          }\n\n          function enableMobileView() {\n            if (previewFrame) {\n              previewFrame.classList.add('mobile-view');\n              applyScale(currentZoom);\n            }\n          }\n\n          function disableMobileView() {\n            if (previewFrame) {\n              previewFrame.classList.remove('mobile-view');\n              applyScale(currentZoom);\n            }\n          }\n\n          // Window resize handler for dynamic scaling\n          window.addEventListener('resize', () => {\n            if (autoFitEnabled) {\n              setTimeout(() => applyScale(currentZoom), 100);\n            }\n          });\n\n          // Initialize scaling when iframe loads\n          if (previewFrame) {\n            previewFrame.addEventListener('load', () => {\n              // Inject viewport meta tag for better responsive behavior\n              try {\n                const iframeDoc = previewFrame.contentDocument || previewFrame.contentWindow.document;\n                if (iframeDoc) {\n                  let viewportMeta = iframeDoc.querySelector('meta[name="viewport"]');\n                  if (!viewportMeta) {\n                    viewportMeta = iframeDoc.createElement('meta');\n                    viewportMeta.name = 'viewport';\n                    viewportMeta.content = 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no';\n                    iframeDoc.head.appendChild(viewportMeta);\n                  }\n\n                  // Add responsive CSS for better mobile display\n                  const responsiveStyle = iframeDoc.createElement('style');\n                  responsiveStyle.textContent = \`\n                    body {\n                      max-width: 100% !important;\n                      overflow-x: hidden !important;\n                    }\n                    * {\n                      max-width: 100% !important;\n                      box-sizing: border-box !important;\n                    }\n                    img {\n                      max-width: 100% !important;\n                      height: auto !important;\n                    }\n                    table {\n                      width: 100% !important;\n                      table-layout: fixed !important;\n                    }\n                    .container, .wrapper, .content {\n                      max-width: 100% !important;\n                      width: 100% !important;\n                    }\n                  \`;\n                  iframeDoc.head.appendChild(responsiveStyle);\n                }\n              } catch (e) {\n                console.log('Could not inject responsive styles (cross-origin):', e);\n              }\n\n              // Apply initial scaling\n              setTimeout(() => applyScale(currentZoom), 100);\n            });\n\n            // Apply initial scaling\n            setTimeout(() => applyScale(currentZoom), 100);\n          }\n\n          // Handle messages from extension (including live reload)\n          window.addEventListener('message', event => {\n            const message = event.data;\n            switch (message.type) {\n              case 'liveReload':\n                console.log('Live reload triggered');\n                if (previewFrame) {\n                  // Reload the iframe content\n                  const currentSrc = previewFrame.src;\n                  previewFrame.src = '';\n                  setTimeout(() => {\n                    previewFrame.src = currentSrc;\n                    // Reapply scaling after reload\n                    setTimeout(() => applyScale(currentZoom), 200);\n                  }, 100);\n                }\n                break;\n              case 'fileChange':\n                console.log('File changed:', message.payload.file);\n                break;\n              case 'zoomIn':\n                zoomIn();\n                break;\n              case 'zoomOut':\n                zoomOut();\n                break;\n              case 'resetZoom':\n                resetZoom();\n                break;\n              case 'toggleAutoFit':\n                toggleAutoFit();\n                break;\n              case 'enableMobileView':\n                enableMobileView();\n                break;\n              case 'disableMobileView':\n                disableMobileView();\n                break;\n            }\n          });\n        <\/script>\n      </body>\n      </html>\n    `}navigateHome(){vscode.window.showInformationMessage("TBX Live Server: Navigated to home")}zoomIn(){this.previewPanel?.webview&&this.previewPanel.webview.postMessage({type:"zoomIn"})}zoomOut(){this.previewPanel?.webview&&this.previewPanel.webview.postMessage({type:"zoomOut"})}resetZoom(){this.previewPanel?.webview&&this.previewPanel.webview.postMessage({type:"resetZoom"})}toggleAutoFit(){this.previewPanel?.webview&&this.previewPanel.webview.postMessage({type:"toggleAutoFit"})}enableMobileView(){this.previewPanel?.webview&&this.previewPanel.webview.postMessage({type:"enableMobileView"})}disableMobileView(){this.previewPanel?.webview&&this.previewPanel.webview.postMessage({type:"disableMobileView"})}toggleSplitView(){vscode.window.showInformationMessage("TBX Live Server: Split view toggled")}toggleFullScreen(){vscode.window.showInformationMessage("TBX Live Server: Full screen toggled")}openDevTools(){vscode.window.showInformationMessage("TBX Live Server: Developer tools opened")}inspectElement(){vscode.window.showInformationMessage("TBX Live Server: Element inspection started")}viewSource(){vscode.window.showInformationMessage("TBX Live Server: Source view opened")}clearHistory(){vscode.window.showInformationMessage("TBX Live Server: History cleared")}saveState(){vscode.window.showInformationMessage("TBX Live Server: State saved")}loadState(){vscode.window.showInformationMessage("TBX Live Server: State loaded")}dispose(){console.log("[CommandManager] Disposing..."),this.stopServers(this.servers.map(e=>e.id),{silent:!0}),this.liveReloadManager&&this.liveReloadManager.dispose()}}exports.CommandManagerEnhanced=CommandManagerEnhanced}},__webpack_module_cache__={};function __webpack_require__(e){var n=__webpack_module_cache__[e];if(void 0!==n)return n.exports;var t=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e].call(t.exports,t,t.exports,__webpack_require__),t.exports}var __webpack_exports__=__webpack_require__(55);module.exports=__webpack_exports__})();