{"version":3,"file":"extension-enhanced.js","mappings":"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","sources":[".././src/commandManager-enhanced.ts",".././src/communicationManager.ts",".././src/errorRecoveryManager.ts",".././src/extension-enhanced.ts",".././src/liveReloadManager.ts",".././src/statusBarManager.ts",".././src/webviewPanelProvider.ts","../external commonjs \"live-server\"","../external node-commonjs \"path\"","../external commonjs \"vscode\"","../webpack/bootstrap","../webpack/before-startup","../webpack/startup","../webpack/after-startup"],"sourcesContent":["import * as path from 'path';\nimport * as vscode from 'vscode';\nimport { StatusBarManager } from './statusBarManager';\nimport { CommunicationManager } from './communicationManager';\nimport { LiveReloadManager } from './liveReloadManager';\nimport { ErrorRecoveryManager } from './errorRecoveryManager';\n\ninterface ServerInstance {\n  id: string;\n  rootPath: string;\n  workspaceName: string;\n  port: number;\n  process: { kill(): void };\n}\n\ninterface ServerPickItem extends vscode.QuickPickItem {\n  server: ServerInstance | null;\n}\n\nexport class CommandManagerEnhanced {\n  private statusBarManager: StatusBarManager;\n  private communicationManager: CommunicationManager;\n  private liveReloadManager: LiveReloadManager;\n  private errorRecoveryManager: ErrorRecoveryManager;\n  private previewPanel: vscode.WebviewPanel | null = null;\n  private servers: ServerInstance[] = [];\n  private activeServerId: string | null = null;\n  private targetFilePath: string | null = null;\n\n  constructor(\n    communicationManager: CommunicationManager,\n    errorRecoveryManager: ErrorRecoveryManager\n  ) {\n    this.statusBarManager = new StatusBarManager();\n    this.communicationManager = communicationManager;\n    this.errorRecoveryManager = errorRecoveryManager;\n\n    // Initialize live reload manager with dependencies\n    this.liveReloadManager = new LiveReloadManager(\n      communicationManager,\n      errorRecoveryManager\n    );\n\n    // Connect live reload manager to this command manager\n    this.liveReloadManager.setCommandManager(this);\n  }\n\n  public executeCommand(command: string, contextUri?: vscode.Uri): void {\n    console.log(`[CommandManager] Executing command: ${command}`, contextUri ? `with URI: ${contextUri.fsPath}` : 'without URI');\n\n    try {\n      switch (command) {\n        case 'goOffline':\n          void this.goOffline();\n          break;\n        case 'goOnline':\n          this.goOnline(contextUri);\n          break;\n        case 'showFileBrowser':\n          this.showFileBrowser();\n          break;\n        case 'changeWorkspace':\n          this.changeWorkspace();\n          break;\n        case 'startWebview':\n          this.startWebview();\n          break;\n        case 'navigateHome':\n          this.navigateHome();\n          break;\n        case 'zoomIn':\n          this.zoomIn();\n          break;\n        case 'zoomOut':\n          this.zoomOut();\n          break;\n        case 'resetZoom':\n          this.resetZoom();\n          break;\n        case 'toggleSplitView':\n          this.toggleSplitView();\n          break;\n        case 'toggleFullScreen':\n          this.toggleFullScreen();\n          break;\n        case 'openDevTools':\n          this.openDevTools();\n          break;\n        case 'inspectElement':\n          this.inspectElement();\n          break;\n        case 'viewSource':\n          this.viewSource();\n          break;\n        case 'clearHistory':\n          this.clearHistory();\n          break;\n        case 'saveState':\n          this.saveState();\n          break;\n        case 'loadState':\n          this.loadState();\n          break;\n        default:\n          console.error(`[CommandManager] Unknown command: ${command}`);\n          vscode.window.showErrorMessage(`Unknown command: ${command}`);\n      }\n    } catch (error) {\n      console.error(`[CommandManager] Error executing command ${command}:`, error);\n      vscode.window.showErrorMessage(`Error executing command: ${error}`);\n    }\n  }\n\n  private async goOffline(): Promise<void> {\n    console.log('[CommandManager] Stopping server...');\n\n    if (this.servers.length === 0) {\n      vscode.window.showInformationMessage('Inline Live Server: No servers are currently running');\n      return;\n    }\n\n    try {\n      let targetIds: string[] = [];\n\n      if (this.servers.length === 1) {\n        targetIds = [this.servers[0].id];\n      } else {\n        const pickItems: ServerPickItem[] = this.servers.map(server => ({\n          label: `${server.workspaceName} (${server.port})`,\n          description: server.rootPath,\n          server\n        }));\n\n        pickItems.push({\n          label: 'Stop All Servers',\n          description: 'Terminate every running TBX Live Server server',\n          server: null\n        });\n\n        const selection = await vscode.window.showQuickPick(pickItems, {\n          placeHolder: 'Select TBX Live Server server to stop'\n        });\n\n        if (!selection) {\n          return;\n        }\n\n        if (selection.server) {\n          targetIds = [selection.server.id];\n        } else {\n          targetIds = this.servers.map(server => server.id);\n        }\n      }\n\n      this.stopServers(targetIds);\n    } catch (error) {\n      console.error('[CommandManager] Error stopping server:', error);\n      vscode.window.showErrorMessage(`Error stopping server: ${error}`);\n    }\n  }\n\n  private goOnline(contextUri?: vscode.Uri): void {\n    console.log('[CommandManager] Starting server...', contextUri ? `for file: ${contextUri.fsPath}` : '');\n\n    try {\n      // Determine workspace folder and target file\n      let workspaceFolder: vscode.WorkspaceFolder | undefined;\n      let targetFile: string | null = null;\n\n      if (contextUri) {\n        // Context menu was used - get workspace folder for the selected file\n        workspaceFolder = vscode.workspace.getWorkspaceFolder(contextUri);\n        if (workspaceFolder) {\n          // Calculate relative path from workspace root to the target file\n          const relativePath = path.relative(workspaceFolder.uri.fsPath, contextUri.fsPath);\n          targetFile = relativePath.replace(/\\\\/g, '/'); // Normalize path separators\n          console.log(`[CommandManager] Target file: ${targetFile}`);\n        }\n      } else {\n        // Fallback to current behavior\n        workspaceFolder = this.resolveWorkspaceFolder();\n      }\n\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage('TBX Live Server: No workspace folder found');\n        return;\n      }\n\n      // Store target file for webview navigation\n      this.targetFilePath = targetFile;\n\n      const existingServer = this.servers.find(\n        server => server.id === workspaceFolder!.uri.fsPath\n      );\n\n      if (existingServer) {\n        this.activeServerId = existingServer.id;\n        vscode.window.showWarningMessage(\n          `TBX Live Server: Server is already running on port ${existingServer.port}`\n        );\n        this.updatePreviewPanel();\n        this.startWebview();\n        return;\n      }\n\n      const config = vscode.workspace.getConfiguration('tbxLivePreview.server');\n      const basePort = config.get('customPort', 5501);\n      const port = this.findAvailablePort(basePort);\n\n      const serverProcess = this.startLiveServer(workspaceFolder.uri.fsPath, port);\n\n      const serverInstance: ServerInstance = {\n        id: workspaceFolder.uri.fsPath,\n        rootPath: workspaceFolder.uri.fsPath,\n        workspaceName: workspaceFolder.name,\n        port,\n        process: serverProcess\n      };\n\n      this.servers.push(serverInstance);\n      this.activeServerId = serverInstance.id;\n\n      this.updateStatusBar();\n      this.communicationManager.sendMessage({\n        type: 'serverStatus',\n        payload: { status: 'running', port, url: `http://localhost:${port}` }\n      });\n\n      this.startWebview();\n\n      // Initialize live reload manager\n      this.liveReloadManager.initialize();\n\n      // Show success message with occasional support mention\n      const messages = [\n        `Inline Live Server: Server started for ${workspaceFolder.name} on port ${port}`,\n        `Inline Live Server: Server started for ${workspaceFolder.name} on port ${port}`,\n        `Inline Live Server: Server started for ${workspaceFolder.name} on port ${port}`,\n        `Inline Live Server: Server started for ${workspaceFolder.name} on port ${port}`,\n        `Inline Live Server: Server started for ${workspaceFolder.name} on port ${port} • Enjoying the extension? ☕ Support development: https://buymeacoffee.com/th3mailman`\n      ];\n      const randomMessage = messages[Math.floor(Math.random() * messages.length)];\n      vscode.window.showInformationMessage(randomMessage);\n      console.log(`[CommandManager] Server started successfully on port ${port}`);\n    } catch (error) {\n      console.error('[CommandManager] Error starting server:', error);\n      vscode.window.showErrorMessage(`Error starting server: ${error}`);\n      this.updateStatusBar(true);\n    }\n  }\n\n  private async showFileBrowser(): Promise<void> {\n    console.log('[CommandManager] Showing file browser...');\n\n    try {\n      const workspaceFolder = this.resolveWorkspaceFolder();\n      if (!workspaceFolder) {\n        vscode.window.showErrorMessage('TBX Live Server: No workspace folder found');\n        return;\n      }\n\n      // Find HTML files in the workspace\n      const htmlFiles = await vscode.workspace.findFiles(\n        new vscode.RelativePattern(workspaceFolder, '**/*.{html,htm}'),\n        '**/node_modules/**',\n        50 // Limit to 50 files\n      );\n\n      if (htmlFiles.length === 0) {\n        vscode.window.showInformationMessage('No HTML files found in the workspace');\n        return;\n      }\n\n      // Create quick pick items\n      const quickPickItems = htmlFiles.map(file => {\n        const relativePath = vscode.workspace.asRelativePath(file, false);\n        return {\n          label: path.basename(file.fsPath),\n          description: relativePath,\n          detail: file.fsPath,\n          uri: file\n        };\n      });\n\n      // Show quick pick\n      const selectedFile = await vscode.window.showQuickPick(quickPickItems, {\n        placeHolder: 'Select an HTML file to serve',\n        matchOnDescription: true,\n        matchOnDetail: true\n      });\n\n      if (selectedFile) {\n        console.log(`[CommandManager] User selected file: ${selectedFile.uri.fsPath}`);\n        // Start server for the selected file\n        this.goOnline(selectedFile.uri);\n      }\n    } catch (error) {\n      console.error('[CommandManager] Error showing file browser:', error);\n      vscode.window.showErrorMessage(`Error showing file browser: ${error}`);\n    }\n  }\n\n  private loadLiveServerModule(): any {\n    try {\n      const moduleFromDependencies = require('live-server');\n      if (moduleFromDependencies && typeof moduleFromDependencies.start === 'function') {\n        console.log('[CommandManager] Live-server module loaded from node_modules');\n        return moduleFromDependencies;\n      }\n      console.warn('[CommandManager] Live-server module from node_modules missing start method');\n    } catch (error) {\n      console.warn(`[CommandManager] Failed to load live-server from node_modules: ${error}`);\n    }\n\n    const bundledModulePath = path.join(__dirname, '..', 'lib', 'live-server');\n    const dynamicRequire = eval('require'); // Avoid webpack static analysis for fallback path\n\n    try {\n      const bundledModule = dynamicRequire(bundledModulePath);\n      if (bundledModule && typeof bundledModule.start === 'function') {\n        console.log('[CommandManager] Live-server module loaded from bundled fallback');\n        return bundledModule;\n      }\n      console.warn('[CommandManager] Bundled live-server module missing start method');\n    } catch (error) {\n      console.warn(`[CommandManager] Failed to load bundled live-server module: ${error}`);\n    }\n\n    throw new Error('Unable to locate live-server module with start method');\n  }\n\n  private startLiveServer(rootPath: string, port: number): { kill(): void } {\n    console.log(`[CommandManager] Starting live server on path: ${rootPath}, port: ${port}`);\n\n    try {\n      // Resolve the live-server module from available locations\n      const liveServerModule = this.loadLiveServerModule();\n\n      const params = {\n        port: port,\n        host: '127.0.0.1',\n        root: rootPath,\n        open: false, // Don't open browser automatically\n        wait: 100,\n        logLevel: 2, // Info level\n        middleware: [\n          (req: any, res: any, next: any) => {\n            console.log(`[LiveServer] ${req.method} ${req.url}`);\n            next();\n          }\n        ]\n      };\n\n      console.log('[CommandManager] Starting live-server with params:', params);\n\n      // Start the server using the default export\n      liveServerModule.start(params);\n\n      const processHandle = {\n        kill: () => {\n          try {\n            if (liveServerModule.shutdown && typeof liveServerModule.shutdown === 'function') {\n              liveServerModule.shutdown();\n            }\n          } catch (error) {\n            console.error('[CommandManager] Error shutting down live-server:', error);\n          }\n        }\n      };\n\n      console.log('[CommandManager] Live server started successfully');\n      return processHandle;\n    } catch (error) {\n      console.error('[CommandManager] Error starting live-server:', error);\n      throw new Error(`Failed to start live server: ${error}`);\n    }\n  }\n\n  private changeWorkspace(): void {\n    console.log('[CommandManager] Changing workspace...');\n\n    vscode.window.showWorkspaceFolderPick().then(folder => {\n      if (folder) {\n        vscode.window.showInformationMessage(`TBX Live Server: Workspace changed to ${folder.name}`);\n        console.log(`[CommandManager] Workspace changed to: ${folder.name}`);\n      }\n    });\n  }\n\n  private startWebview(): void {\n    console.log('[CommandManager] Ensuring webview is visible...');\n\n    try {\n      const existingPanel = this.previewPanel;\n      if (existingPanel) {\n        existingPanel.reveal(vscode.ViewColumn.Two);\n        this.updatePreviewPanel();\n        console.log('[CommandManager] Webview panel revealed and updated');\n        return;\n      }\n\n      const panel = vscode.window.createWebviewPanel(\n        'tbxLivePreview',\n        'TBX Live Server',\n        vscode.ViewColumn.Two,\n        {\n          enableScripts: true,\n          retainContextWhenHidden: true,\n          enableFindWidget: true\n        }\n      );\n\n      this.previewPanel = panel;\n      panel.onDidDispose(() => {\n        this.previewPanel = null;\n      });\n\n      panel.webview.onDidReceiveMessage(message => {\n        const selectedServerId = (message?.serverId as string | undefined) ?? this.activeServerId;\n        switch (message.command) {\n          case 'startServer':\n            this.goOnline();\n            break;\n          case 'stopServer':\n            if (selectedServerId) {\n              this.stopServers([selectedServerId]);\n            } else {\n              vscode.window.showInformationMessage('Inline Live Server: No server selected to stop');\n            }\n            break;\n          case 'openInBrowser':\n            {\n              const server = this.getServerById(selectedServerId);\n              if (server) {\n                const uri = vscode.Uri.parse(`http://127.0.0.1:${server.port}`);\n                vscode.env.openExternal(uri);\n              } else {\n                vscode.window.showInformationMessage('Inline Live Server: Server is not running');\n              }\n            }\n            break;\n          case 'refresh':\n            this.updatePreviewPanel();\n            break;\n          case 'selectServer':\n            if (selectedServerId && this.getServerById(selectedServerId)) {\n              this.activeServerId = selectedServerId;\n              this.updatePreviewPanel();\n            }\n            break;\n        }\n      });\n\n      this.updatePreviewPanel();\n      vscode.window.showInformationMessage('TBX Live Server: Webview opened');\n      console.log('[CommandManager] Webview started successfully');\n    } catch (error) {\n      console.error('[CommandManager] Error starting webview:', error);\n      vscode.window.showErrorMessage(`Error starting webview: ${error}`);\n    }\n  }\n\n  private updatePreviewPanel(): void {\n    if (!this.previewPanel) {\n      return;\n    }\n\n    this.previewPanel.webview.html = this.getWebviewContent();\n  }\n\n  public sendLiveReloadMessage(): void {\n    if (!this.previewPanel) {\n      return;\n    }\n\n    this.previewPanel.webview.postMessage({\n      type: 'liveReload',\n      payload: {\n        action: 'reload',\n        timestamp: Date.now()\n      }\n    });\n  }\n\n  public sendFileChangeMessage(file: string, changeType: string): void {\n    if (!this.previewPanel) {\n      return;\n    }\n\n    this.previewPanel.webview.postMessage({\n      type: 'fileChange',\n      payload: {\n        file,\n        changeType,\n        timestamp: Date.now()\n      }\n    });\n  }\n\n  private resolveWorkspaceFolder(): vscode.WorkspaceFolder | undefined {\n    const activeEditor = vscode.window.activeTextEditor;\n    if (activeEditor) {\n      const folder = vscode.workspace.getWorkspaceFolder(activeEditor.document.uri);\n      if (folder) {\n        return folder;\n      }\n    }\n\n    return vscode.workspace.workspaceFolders?.[0];\n  }\n\n  private findAvailablePort(basePort: number): number {\n    const usedPorts = new Set(this.servers.map(server => server.port));\n    let port = basePort;\n\n    while (usedPorts.has(port)) {\n      port += 1;\n    }\n\n    return port;\n  }\n\n  private getServerById(serverId: string | null | undefined): ServerInstance | undefined {\n    if (!serverId) {\n      return undefined;\n    }\n\n    return this.servers.find(server => server.id === serverId);\n  }\n\n  private updateStatusBar(hasError = false): void {\n    if (hasError) {\n      this.statusBarManager.updateServerState('error');\n      return;\n    }\n\n    if (this.servers.length === 0) {\n      this.statusBarManager.updateServerState('stopped');\n    } else {\n      this.statusBarManager.updateServerState('running', this.servers.length);\n    }\n  }\n\n  private escapeHtml(value: string): string {\n    return value\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\"/g, '&quot;')\n      .replace(/'/g, '&#39;');\n  }\n\n  private escapeHtmlAttribute(value: string): string {\n    return this.escapeHtml(value);\n  }\n\n  private stopServers(serverIds: string[], options: { silent?: boolean } = {}): void {\n    if (serverIds.length === 0) {\n      return;\n    }\n\n    const uniqueIds = Array.from(new Set(serverIds));\n    const stoppedServers: ServerInstance[] = [];\n    const silent = Boolean(options.silent);\n\n    for (const id of uniqueIds) {\n      const server = this.servers.find(instance => instance.id === id);\n      if (!server) {\n        continue;\n      }\n\n      try {\n        server.process.kill();\n        stoppedServers.push(server);\n      } catch (error) {\n        console.error('[CommandManager] Error shutting down server:', error);\n      }\n    }\n\n    this.servers = this.servers.filter(server => !uniqueIds.includes(server.id));\n\n    if (this.activeServerId && uniqueIds.includes(this.activeServerId)) {\n      this.activeServerId = this.servers[0]?.id ?? null;\n    }\n\n    for (const server of stoppedServers) {\n      this.communicationManager.sendMessage({\n        type: 'serverStatus',\n        payload: { status: 'stopped', port: server.port }\n      });\n\n      if (!silent) {\n        vscode.window.showInformationMessage(\n          `TBX Live Server: Server stopped for ${server.workspaceName} (${server.port})`\n        );\n      }\n    }\n\n    // Disable live reload if no servers are running\n    if (this.servers.length === 0) {\n      this.liveReloadManager.setEnabled(false);\n    }\n\n    this.updateStatusBar();\n    this.updatePreviewPanel();\n    console.log('[CommandManager] Server stop sequence complete');\n  }\n\n  private getWebviewContent(): string {\n    const serversData = this.servers.map(server => ({\n      id: server.id,\n      label: `${server.workspaceName} (${server.port})`,\n      port: server.port,\n      url: `http://127.0.0.1:${server.port}`,\n      rootPath: server.rootPath\n    }));\n\n    const activeServer = this.getServerById(this.activeServerId ?? undefined);\n    const hasRunningServer = Boolean(activeServer);\n\n    // Construct the URL with target file if available\n    let serverUrl = '';\n    if (hasRunningServer && activeServer?.port) {\n      serverUrl = `http://127.0.0.1:${activeServer.port}`;\n      if (this.targetFilePath) {\n        serverUrl += `/${this.targetFilePath}`;\n      }\n    }\n\n    const statusText = hasRunningServer\n      ? `Server running at ${serverUrl || 'Unknown port'}`\n      : 'Server is stopped';\n    const portDisplay = activeServer?.port ?? '—';\n    const iframeContent = hasRunningServer\n      ? `<div class=\"preview-container\">\n           <iframe id=\"previewFrame\" src=\"${serverUrl}\" class=\"preview-frame auto-fit\" sandbox=\"allow-scripts allow-same-origin allow-forms allow-popups allow-popups-to-escape-sandbox\"></iframe>\n         </div>`\n      : `<div class=\"placeholder\">\n           <div class=\"placeholder-icon\">🚀</div>\n           <p><strong>Ready to Launch</strong></p>\n           <p>Click \"Start\" to begin serving your files and see the live preview here.</p>\n         </div>`;\n\n    const optionsHtml = serversData\n      .map(server => {\n        const selected = server.id === this.activeServerId ? 'selected' : '';\n        return `<option value=\"${this.escapeHtmlAttribute(server.id)}\" ${selected}>${this.escapeHtml(server.label)}</option>`;\n      })\n      .join('');\n\n    return `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>TBX Live Server</title>\n        <style>\n          body {\n            margin: 0;\n            font-family: var(--vscode-font-family);\n            font-size: var(--vscode-font-size);\n            background-color: var(--vscode-editor-background);\n            color: var(--vscode-editor-foreground);\n            display: flex;\n            flex-direction: column;\n            height: 100vh;\n          }\n\n          header {\n            display: grid;\n            grid-template-columns: auto 1fr auto auto;\n            grid-template-areas: \"status controls actions toggle\";\n            align-items: center;\n            padding: 12px 16px;\n            background: linear-gradient(135deg, var(--vscode-editorWidget-background) 0%, var(--vscode-sideBar-background) 100%);\n            border-bottom: 1px solid var(--vscode-panel-border);\n            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n            gap: 16px;\n            min-height: 56px;\n            transition: all 0.3s ease;\n            overflow: hidden;\n          }\n\n          header.collapsed {\n            grid-template-columns: auto 1fr auto;\n            grid-template-areas: \"status-minimal . toggle\";\n            min-height: 40px;\n            padding: 8px 16px;\n          }\n\n          .status {\n            grid-area: status;\n            display: flex;\n            flex-direction: column;\n            gap: 4px;\n            font-size: 12px;\n            min-width: 200px;\n            transition: all 0.3s ease;\n          }\n\n          .status strong {\n            font-size: 14px;\n            font-weight: 600;\n            color: var(--vscode-textLink-foreground);\n            display: flex;\n            align-items: center;\n            gap: 8px;\n          }\n\n          .status-minimal {\n            grid-area: status-minimal;\n            display: none;\n            align-items: center;\n            gap: 8px;\n            font-size: 13px;\n            font-weight: 500;\n            color: var(--vscode-textLink-foreground);\n          }\n\n          .minimal-actions {\n            display: none;\n            align-items: center;\n            gap: 4px;\n            margin-left: 12px;\n          }\n\n          .minimal-action-btn {\n            width: 24px;\n            height: 24px;\n            background-color: var(--vscode-button-background);\n            color: var(--vscode-button-foreground);\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 11px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            transition: all 0.2s ease;\n          }\n\n          .minimal-action-btn:hover {\n            background-color: var(--vscode-button-hoverBackground);\n            transform: scale(1.1);\n          }\n\n          .minimal-action-btn:disabled {\n            opacity: 0.5;\n            cursor: not-allowed;\n            transform: none;\n          }\n\n          header.collapsed .status {\n            display: none;\n          }\n\n          header.collapsed .status-minimal {\n            display: flex;\n          }\n\n          header.collapsed .minimal-actions {\n            display: flex;\n          }\n\n          .status-indicator {\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            background-color: var(--vscode-charts-green);\n            box-shadow: 0 0 4px rgba(0, 255, 0, 0.3);\n            animation: pulse 2s infinite;\n          }\n\n          .status-indicator.offline {\n            background-color: var(--vscode-errorForeground);\n            box-shadow: 0 0 4px rgba(255, 0, 0, 0.3);\n            animation: none;\n          }\n\n          @keyframes pulse {\n            0%, 100% { opacity: 1; }\n            50% { opacity: 0.6; }\n          }\n\n          .port-info {\n            color: var(--vscode-descriptionForeground);\n            font-family: var(--vscode-editor-font-family);\n          }\n          .controls {\n            grid-area: controls;\n            display: flex;\n            align-items: center;\n            gap: 8px;\n            justify-content: center;\n            transition: all 0.3s ease;\n          }\n\n          header.collapsed .controls {\n            display: none;\n          }\n\n          .server-selector {\n            position: relative;\n            min-width: 200px;\n          }\n\n          .controls select {\n            width: 100%;\n            padding: 8px 12px;\n            background-color: var(--vscode-dropdown-background);\n            color: var(--vscode-dropdown-foreground);\n            border: 1px solid var(--vscode-dropdown-border);\n            border-radius: 6px;\n            font-size: 13px;\n            font-family: var(--vscode-font-family);\n            cursor: pointer;\n            transition: all 0.2s ease;\n          }\n\n          .controls select:hover {\n            border-color: var(--vscode-focusBorder);\n            box-shadow: 0 0 0 1px var(--vscode-focusBorder);\n          }\n\n          .controls select:focus {\n            outline: none;\n            border-color: var(--vscode-focusBorder);\n            box-shadow: 0 0 0 2px var(--vscode-focusBorder);\n          }\n\n          .actions {\n            grid-area: actions;\n            display: flex;\n            gap: 8px;\n            align-items: center;\n            transition: all 0.3s ease;\n          }\n\n          header.collapsed .actions {\n            display: none;\n          }\n\n          .header-toggle {\n            grid-area: toggle;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            width: 32px;\n            height: 32px;\n            background-color: var(--vscode-toolbar-hoverBackground);\n            border: 1px solid var(--vscode-panel-border);\n            border-radius: 6px;\n            cursor: pointer;\n            font-size: 14px;\n            color: var(--vscode-foreground);\n            transition: all 0.2s ease;\n            flex-shrink: 0;\n          }\n\n          .header-toggle:hover {\n            background-color: var(--vscode-toolbar-activeBackground);\n            border-color: var(--vscode-focusBorder);\n            transform: translateY(-1px);\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n          }\n\n          .header-toggle:active {\n            transform: translateY(0);\n            box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);\n          }\n\n          .btn-group {\n            display: flex;\n            gap: 4px;\n            background-color: var(--vscode-toolbar-hoverBackground);\n            border-radius: 8px;\n            padding: 4px;\n          }\n\n          .controls button, .actions button {\n            padding: 8px 16px;\n            background-color: var(--vscode-button-background);\n            color: var(--vscode-button-foreground);\n            border: none;\n            border-radius: 6px;\n            cursor: pointer;\n            font-size: 13px;\n            font-weight: 500;\n            font-family: var(--vscode-font-family);\n            transition: all 0.2s ease;\n            min-height: 32px;\n            display: flex;\n            align-items: center;\n            gap: 6px;\n          }\n\n          .controls button:hover, .actions button:hover {\n            background-color: var(--vscode-button-hoverBackground);\n            transform: translateY(-1px);\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n          }\n\n          .controls button:active, .actions button:active {\n            transform: translateY(0);\n            box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);\n          }\n\n          .controls button:disabled, .actions button:disabled {\n            opacity: 0.5;\n            cursor: not-allowed;\n            transform: none;\n            box-shadow: none;\n          }\n\n          .btn-primary {\n            background-color: var(--vscode-button-background) !important;\n            color: var(--vscode-button-foreground) !important;\n          }\n\n          .btn-secondary {\n            background-color: var(--vscode-button-secondaryBackground) !important;\n            color: var(--vscode-button-secondaryForeground) !important;\n          }\n\n          .btn-danger {\n            background-color: var(--vscode-errorForeground) !important;\n            color: white !important;\n          }\n          .content {\n            flex: 1;\n            background-color: var(--vscode-editorWidget-background);\n            display: flex;\n            position: relative;\n            overflow: hidden;\n          }\n\n          .preview-container {\n            width: 100%;\n            height: 100%;\n            position: relative;\n            overflow: hidden;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n          }\n\n          .preview-frame {\n            border: none;\n            background-color: white;\n            border-radius: 0 0 8px 8px;\n            box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);\n            transform-origin: top left;\n            transition: transform 0.3s ease;\n            position: absolute;\n            top: 0;\n            left: 0;\n          }\n\n          .preview-frame.auto-fit {\n            /* Auto-fit scaling will be applied via JavaScript */\n          }\n\n          .preview-frame.mobile-view {\n            /* Mobile responsive view */\n            max-width: 375px;\n            width: 375px !important;\n          }\n\n          .placeholder {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            height: 100%;\n            color: var(--vscode-descriptionForeground);\n            font-size: 14px;\n            gap: 16px;\n            text-align: center;\n            padding: 40px;\n          }\n\n          .placeholder-icon {\n            font-size: 48px;\n            opacity: 0.5;\n            margin-bottom: 8px;\n          }\n\n          .placeholder p {\n            margin: 0;\n            line-height: 1.5;\n          }\n\n          /* Responsive design for different VS Code panel sizes */\n          @media (max-width: 800px) {\n            header {\n              grid-template-columns: 1fr auto;\n              grid-template-areas:\n                \"status toggle\"\n                \"controls controls\"\n                \"actions actions\";\n              gap: 12px;\n              padding: 12px;\n            }\n\n            header.collapsed {\n              grid-template-columns: 1fr auto;\n              grid-template-areas: \"status-minimal toggle\";\n              gap: 12px;\n              min-height: 36px;\n            }\n\n            .status {\n              min-width: auto;\n              text-align: left;\n            }\n\n            .controls, .actions {\n              justify-content: center;\n            }\n\n            .server-selector {\n              min-width: 150px;\n            }\n          }\n\n          @media (max-width: 500px) {\n            header {\n              padding: 8px;\n              gap: 8px;\n            }\n\n            header.collapsed {\n              padding: 6px 8px;\n            }\n\n            .controls button, .actions button {\n              padding: 6px 12px;\n              font-size: 12px;\n              min-height: 28px;\n            }\n\n            .btn-group {\n              flex-wrap: wrap;\n            }\n\n            .header-toggle {\n              width: 28px;\n              height: 28px;\n              font-size: 12px;\n            }\n          }\n        </style>\n      </head>\n      <body>\n        <header id=\"header\">\n          <div class=\"status\">\n            <strong>\n              <span class=\"status-indicator ${hasRunningServer ? '' : 'offline'}\"></span>\n              ${statusText}\n            </strong>\n            <span class=\"port-info\">Port: ${portDisplay}</span>\n          </div>\n          <div class=\"status-minimal\">\n            <span class=\"status-indicator ${hasRunningServer ? '' : 'offline'}\"></span>\n            <span>${hasRunningServer ? 'Running' : 'Stopped'}</span>\n            <span class=\"port-info\">:${portDisplay}</span>\n            <div class=\"minimal-actions\">\n              <button class=\"minimal-action-btn\" onclick=\"postCommand('${hasRunningServer ? 'stopServer' : 'startServer'}')\" title=\"${hasRunningServer ? 'Stop Server' : 'Start Server'}\">${\n                hasRunningServer ? '⏹' : '▶'\n              }</button>\n              <button class=\"minimal-action-btn\" onclick=\"postCommand('refresh')\" ${\n                hasRunningServer ? '' : 'disabled'\n              } title=\"Refresh Preview\">🔄</button>\n              <button class=\"minimal-action-btn\" onclick=\"postCommand('openInBrowser')\" ${\n                hasRunningServer ? '' : 'disabled'\n              } title=\"Open in Browser\">🌐</button>\n            </div>\n          </div>\n          <div class=\"controls\">\n            <div class=\"server-selector\">\n              <select id=\"serverSelect\" ${serversData.length === 0 ? 'disabled' : ''}>\n                ${optionsHtml || '<option value=\"\" selected>No servers running</option>'}\n              </select>\n            </div>\n          </div>\n          <div class=\"actions\">\n            <div class=\"btn-group\">\n              <button class=\"btn-primary\" onclick=\"postCommand('${hasRunningServer ? 'stopServer' : 'startServer'}')\">${\n                hasRunningServer ? '⏹ Stop' : '▶ Start'\n              }</button>\n              <button class=\"btn-secondary\" onclick=\"postCommand('refresh')\" ${\n                hasRunningServer ? '' : 'disabled'\n              }>🔄 Refresh</button>\n              <button class=\"btn-secondary\" onclick=\"postCommand('openInBrowser')\" ${\n                hasRunningServer ? '' : 'disabled'\n              }>🌐 Browser</button>\n            </div>\n            <div class=\"btn-group\">\n              <button class=\"btn-secondary\" onclick=\"zoomOut()\" title=\"Zoom Out\">🔍-</button>\n              <button class=\"btn-secondary\" onclick=\"resetZoom()\" title=\"Reset Zoom\">🔍</button>\n              <button class=\"btn-secondary\" onclick=\"zoomIn()\" title=\"Zoom In\">🔍+</button>\n              <button class=\"btn-secondary\" onclick=\"toggleAutoFit()\" title=\"Toggle Auto-Fit\" id=\"autoFitBtn\">📱</button>\n            </div>\n          </div>\n          <div class=\"header-toggle\" id=\"headerToggle\" title=\"Toggle header size\">\n            <span id=\"toggleIcon\">▲</span>\n          </div>\n        </header>\n        <div class=\"content\" id=\"contentContainer\">\n          ${iframeContent}\n        </div>\n\n        <script>\n          const vscode = acquireVsCodeApi();\n          const servers = ${JSON.stringify(serversData).replace(/</g, '\\u003c')};\n          const activeServerId = ${\n            JSON.stringify(this.activeServerId).replace(/</g, '\\u003c')\n          };\n\n          // Get or restore state\n          let state = vscode.getState() || {};\n          const isCollapsed = state.headerCollapsed || false;\n\n          const header = document.getElementById('header');\n          const headerToggle = document.getElementById('headerToggle');\n          const toggleIcon = document.getElementById('toggleIcon');\n          const select = document.getElementById('serverSelect');\n          const contentContainer = document.getElementById('contentContainer');\n          const previewFrame = document.getElementById('previewFrame');\n\n          // Initialize header state\n          if (isCollapsed) {\n            header.classList.add('collapsed');\n            toggleIcon.textContent = '▼';\n            headerToggle.title = 'Expand header';\n          } else {\n            toggleIcon.textContent = '▲';\n            headerToggle.title = 'Collapse header';\n          }\n\n          // Header toggle functionality\n          function toggleHeader() {\n            const collapsed = header.classList.toggle('collapsed');\n            toggleIcon.textContent = collapsed ? '▼' : '▲';\n            headerToggle.title = collapsed ? 'Expand header' : 'Collapse header';\n\n            // Save state\n            state.headerCollapsed = collapsed;\n            vscode.setState(state);\n          }\n\n          headerToggle.addEventListener('click', toggleHeader);\n\n          // Keyboard shortcut for toggle (Ctrl/Cmd + H)\n          document.addEventListener('keydown', (event) => {\n            if ((event.ctrlKey || event.metaKey) && event.key === 'h') {\n              event.preventDefault();\n              toggleHeader();\n            }\n          });\n\n          if (select && activeServerId) {\n            select.value = activeServerId;\n          }\n\n          if (select) {\n            select.addEventListener('change', () => {\n              vscode.postMessage({ command: 'selectServer', serverId: select.value });\n            });\n          }\n\n          function postCommand(command) {\n            const serverId = select ? select.value : null;\n            vscode.postMessage({ command, serverId });\n          }\n\n          // Responsive scaling functionality\n          let currentZoom = 1;\n          let autoFitEnabled = true;\n          const minZoom = 0.1;\n          const maxZoom = 5;\n\n          function calculateAutoFitScale() {\n            if (!previewFrame || !contentContainer) return 1;\n\n            const containerRect = contentContainer.getBoundingClientRect();\n            const containerWidth = containerRect.width;\n            const containerHeight = containerRect.height;\n\n            // Assume standard desktop width for scaling calculation\n            const standardWidth = 1200;\n            const standardHeight = 800;\n\n            // Calculate scale to fit width, with minimum scale for readability\n            const widthScale = Math.max(0.3, containerWidth / standardWidth);\n            const heightScale = Math.max(0.3, containerHeight / standardHeight);\n\n            // Use the smaller scale to ensure content fits in both dimensions\n            return Math.min(widthScale, heightScale);\n          }\n\n          function applyScale(scale) {\n            if (!previewFrame) return;\n\n            const finalScale = autoFitEnabled ? calculateAutoFitScale() * scale : scale;\n            const clampedScale = Math.max(minZoom, Math.min(maxZoom, finalScale));\n\n            // Apply transform\n            previewFrame.style.transform = \\`scale(\\${clampedScale})\\`;\n            previewFrame.style.width = \\`\\${100 / clampedScale}%\\`;\n            previewFrame.style.height = \\`\\${100 / clampedScale}%\\`;\n\n            // Center the scaled content\n            const container = previewFrame.parentElement;\n            if (container) {\n              container.style.overflow = clampedScale < 1 ? 'hidden' : 'auto';\n            }\n          }\n\n          function toggleAutoFit() {\n            autoFitEnabled = !autoFitEnabled;\n            applyScale(currentZoom);\n          }\n\n          function zoomIn() {\n            currentZoom = Math.min(maxZoom, currentZoom * 1.2);\n            applyScale(currentZoom);\n          }\n\n          function zoomOut() {\n            currentZoom = Math.max(minZoom, currentZoom / 1.2);\n            applyScale(currentZoom);\n          }\n\n          function resetZoom() {\n            currentZoom = 1;\n            applyScale(currentZoom);\n          }\n\n          function enableMobileView() {\n            if (previewFrame) {\n              previewFrame.classList.add('mobile-view');\n              applyScale(currentZoom);\n            }\n          }\n\n          function disableMobileView() {\n            if (previewFrame) {\n              previewFrame.classList.remove('mobile-view');\n              applyScale(currentZoom);\n            }\n          }\n\n          // Window resize handler for dynamic scaling\n          window.addEventListener('resize', () => {\n            if (autoFitEnabled) {\n              setTimeout(() => applyScale(currentZoom), 100);\n            }\n          });\n\n          // Initialize scaling when iframe loads\n          if (previewFrame) {\n            previewFrame.addEventListener('load', () => {\n              // Inject viewport meta tag for better responsive behavior\n              try {\n                const iframeDoc = previewFrame.contentDocument || previewFrame.contentWindow.document;\n                if (iframeDoc) {\n                  let viewportMeta = iframeDoc.querySelector('meta[name=\"viewport\"]');\n                  if (!viewportMeta) {\n                    viewportMeta = iframeDoc.createElement('meta');\n                    viewportMeta.name = 'viewport';\n                    viewportMeta.content = 'width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no';\n                    iframeDoc.head.appendChild(viewportMeta);\n                  }\n\n                  // Add responsive CSS for better mobile display\n                  const responsiveStyle = iframeDoc.createElement('style');\n                  responsiveStyle.textContent = \\`\n                    body {\n                      max-width: 100% !important;\n                      overflow-x: hidden !important;\n                    }\n                    * {\n                      max-width: 100% !important;\n                      box-sizing: border-box !important;\n                    }\n                    img {\n                      max-width: 100% !important;\n                      height: auto !important;\n                    }\n                    table {\n                      width: 100% !important;\n                      table-layout: fixed !important;\n                    }\n                    .container, .wrapper, .content {\n                      max-width: 100% !important;\n                      width: 100% !important;\n                    }\n                  \\`;\n                  iframeDoc.head.appendChild(responsiveStyle);\n                }\n              } catch (e) {\n                console.log('Could not inject responsive styles (cross-origin):', e);\n              }\n\n              // Apply initial scaling\n              setTimeout(() => applyScale(currentZoom), 100);\n            });\n\n            // Apply initial scaling\n            setTimeout(() => applyScale(currentZoom), 100);\n          }\n\n          // Handle messages from extension (including live reload)\n          window.addEventListener('message', event => {\n            const message = event.data;\n            switch (message.type) {\n              case 'liveReload':\n                console.log('Live reload triggered');\n                if (previewFrame) {\n                  // Reload the iframe content\n                  const currentSrc = previewFrame.src;\n                  previewFrame.src = '';\n                  setTimeout(() => {\n                    previewFrame.src = currentSrc;\n                    // Reapply scaling after reload\n                    setTimeout(() => applyScale(currentZoom), 200);\n                  }, 100);\n                }\n                break;\n              case 'fileChange':\n                console.log('File changed:', message.payload.file);\n                break;\n              case 'zoomIn':\n                zoomIn();\n                break;\n              case 'zoomOut':\n                zoomOut();\n                break;\n              case 'resetZoom':\n                resetZoom();\n                break;\n              case 'toggleAutoFit':\n                toggleAutoFit();\n                break;\n              case 'enableMobileView':\n                enableMobileView();\n                break;\n              case 'disableMobileView':\n                disableMobileView();\n                break;\n            }\n          });\n        </script>\n      </body>\n      </html>\n    `;\n  }\n\n  private navigateHome(): void {\n    vscode.window.showInformationMessage('TBX Live Server: Navigated to home');\n  }\n\n  private zoomIn(): void {\n    if (this.previewPanel?.webview) {\n      this.previewPanel.webview.postMessage({ type: 'zoomIn' });\n    }\n  }\n\n  private zoomOut(): void {\n    if (this.previewPanel?.webview) {\n      this.previewPanel.webview.postMessage({ type: 'zoomOut' });\n    }\n  }\n\n  private resetZoom(): void {\n    if (this.previewPanel?.webview) {\n      this.previewPanel.webview.postMessage({ type: 'resetZoom' });\n    }\n  }\n\n  private toggleAutoFit(): void {\n    if (this.previewPanel?.webview) {\n      this.previewPanel.webview.postMessage({ type: 'toggleAutoFit' });\n    }\n  }\n\n  private enableMobileView(): void {\n    if (this.previewPanel?.webview) {\n      this.previewPanel.webview.postMessage({ type: 'enableMobileView' });\n    }\n  }\n\n  private disableMobileView(): void {\n    if (this.previewPanel?.webview) {\n      this.previewPanel.webview.postMessage({ type: 'disableMobileView' });\n    }\n  }\n\n  private toggleSplitView(): void {\n    vscode.window.showInformationMessage('TBX Live Server: Split view toggled');\n  }\n\n  private toggleFullScreen(): void {\n    vscode.window.showInformationMessage('TBX Live Server: Full screen toggled');\n  }\n\n  private openDevTools(): void {\n    vscode.window.showInformationMessage('TBX Live Server: Developer tools opened');\n  }\n\n  private inspectElement(): void {\n    vscode.window.showInformationMessage('TBX Live Server: Element inspection started');\n  }\n\n  private viewSource(): void {\n    vscode.window.showInformationMessage('TBX Live Server: Source view opened');\n  }\n\n  private clearHistory(): void {\n    vscode.window.showInformationMessage('TBX Live Server: History cleared');\n  }\n\n  private saveState(): void {\n    vscode.window.showInformationMessage('TBX Live Server: State saved');\n  }\n\n  private loadState(): void {\n    vscode.window.showInformationMessage('TBX Live Server: State loaded');\n  }\n\n  public dispose(): void {\n    console.log('[CommandManager] Disposing...');\n\n    this.stopServers(this.servers.map(server => server.id), { silent: true });\n\n    if (this.liveReloadManager) {\n      this.liveReloadManager.dispose();\n    }\n  }\n}\n","import * as vscode from 'vscode';\nimport { CommunicationMessage, Message } from './communicationTypes';\n\nexport class CommunicationManager {\n  private disposables: vscode.Disposable[] = [];\n  private messageHandlers: Map<string, (message: CommunicationMessage) => void> = new Map();\n\n  constructor() {\n    // Private constructor for singleton pattern\n  }\n\n  public initialize(): void {\n    // Set up message handling\n    this.registerMessageHandler('serverStatus', this.handleServerStatus.bind(this));\n    this.registerMessageHandler('navigation', this.handleNavigation.bind(this));\n    this.registerMessageHandler('error', this.handleError.bind(this));\n  }\n\n  public registerMessageHandler(\n    type: string,\n    handler: (message: CommunicationMessage) => void\n  ): void {\n    this.messageHandlers.set(type, handler);\n  }\n\n  public unregisterMessageHandler(type: string): void {\n    this.messageHandlers.delete(type);\n  }\n\n  public sendMessage(message: CommunicationMessage): void {\n    const handler = this.messageHandlers.get(message.type);\n    if (handler) {\n      handler(message);\n    }\n  }\n\n  public broadcastMessage(message: CommunicationMessage): void {\n    // Broadcast to all registered handlers\n    this.messageHandlers.forEach(handler => {\n      try {\n        handler(message);\n      } catch (error) {\n        console.error('Error in message handler:', error);\n      }\n    });\n  }\n\n  private handleServerStatus(message: CommunicationMessage): void {\n    const statusMessage = message as any;\n    console.log('Server status:', statusMessage.payload?.status);\n\n    // Update status bar based on server status\n    const status = statusMessage.payload?.status;\n    if (status === 'running') {\n      vscode.window.showInformationMessage('Server is running');\n    } else if (status === 'stopped') {\n      vscode.window.showInformationMessage('Server stopped');\n    } else if (status === 'error') {\n      vscode.window.showErrorMessage('Server error occurred');\n    }\n  }\n\n  private handleNavigation(message: CommunicationMessage): void {\n    const navMessage = message as any;\n    console.log('Navigation:', navMessage.payload?.action);\n  }\n\n  private handleError(message: CommunicationMessage): void {\n    const errorMessage = message as any;\n    console.error('Communication error:', errorMessage.payload?.message);\n    vscode.window.showErrorMessage(`Communication error: ${errorMessage.payload?.message}`);\n  }\n\n  public dispose(): void {\n    this.messageHandlers.clear();\n    this.disposables.forEach(disposable => disposable.dispose());\n    this.disposables = [];\n  }\n}","import * as vscode from 'vscode';\nimport { CommunicationMessage } from './communicationTypes';\n\nexport class ErrorRecoveryManager {\n  private disposables: vscode.Disposable[] = [];\n  private retryAttempts: Map<string, number> = new Map();\n  private maxRetries: number = 3;\n\n  constructor() {\n    // Private constructor for singleton pattern\n  }\n\n  public initialize(): void {\n    // Set up error handling\n    vscode.workspace.onDidChangeConfiguration(\n      (e) => {\n        if (e.affectsConfiguration('tbxLivePreview.development')) {\n          this.handleConfigurationChange();\n        }\n      },\n      null,\n      this.disposables\n    );\n  }\n\n  public handleError(error: Error, context: string): void {\n    console.error(`Error in ${context}:`, error);\n\n    // Log error\n    this.logError(error, context);\n\n    // Check if we should attempt recovery\n    if (this.shouldAttemptRecovery(context)) {\n      this.attemptRecovery(context);\n    } else {\n      this.showErrorToUser(error, context);\n    }\n  }\n\n  public handleCommunicationError(message: CommunicationMessage): void {\n    const errorMessage = message as any;\n    const error = new Error(errorMessage.payload?.message || 'Communication error');\n    this.handleError(error, 'communication');\n  }\n\n  private logError(error: Error, context: string): void {\n    const timestamp = new Date().toISOString();\n    const logMessage = `[${timestamp}] Error in ${context}: ${error.message}`;\n\n    // Log to output channel\n    const config = vscode.workspace.getConfiguration('tbxLivePreview.development');\n    const logLevel = config.get<string>('logLevel', 'info');\n\n    if (logLevel === 'debug' || logLevel === 'info') {\n      console.error(logMessage);\n      if (error.stack) {\n        console.error(error.stack);\n      }\n    }\n  }\n\n  private shouldAttemptRecovery(context: string): boolean {\n    const attempts = this.retryAttempts.get(context) || 0;\n    return attempts < this.maxRetries;\n  }\n\n  private attemptRecovery(context: string): void {\n    const attempts = this.retryAttempts.get(context) || 0;\n    this.retryAttempts.set(context, attempts + 1);\n\n    console.log(`Attempting recovery for ${context} (attempt ${attempts + 1}/${this.maxRetries})`);\n\n    // Attempt recovery based on context\n    switch (context) {\n      case 'server':\n        this.recoverServer();\n        break;\n      case 'webview':\n        this.recoverWebview();\n        break;\n      case 'communication':\n        this.recoverCommunication();\n        break;\n      default:\n        console.log(`No recovery strategy for context: ${context}`);\n    }\n  }\n\n  private recoverServer(): void {\n    // Attempt to restart the server\n    vscode.commands.executeCommand('extension.liveServer.goOnline');\n  }\n\n  private recoverWebview(): void {\n    // Attempt to recreate webview panel\n    vscode.commands.executeCommand('extension.liveServer.startWebview');\n  }\n\n  private recoverCommunication(): void {\n    // Attempt to reinitialize communication\n    vscode.window.showInformationMessage('Attempting to restore communication...');\n  }\n\n  private showErrorToUser(error: Error, context: string): void {\n    const message = `Inline Live Server: Error in ${context} - ${error.message}`;\n    vscode.window.showErrorMessage(message, 'Retry', 'Show Details').then(selection => {\n      if (selection === 'Retry') {\n        this.retryAttempts.delete(context);\n        this.attemptRecovery(context);\n      } else if (selection === 'Show Details') {\n        this.showErrorDetails(error, context);\n      }\n    });\n  }\n\n  private showErrorDetails(error: Error, context: string): void {\n    const details = `Context: ${context}\\nMessage: ${error.message}\\nStack: ${error.stack || 'No stack trace'}`;\n    vscode.workspace.openTextDocument({\n      content: details,\n      language: 'log'\n    }).then(doc => {\n      vscode.window.showTextDocument(doc);\n    });\n  }\n\n  private handleConfigurationChange(): void {\n    const config = vscode.workspace.getConfiguration('tbxLivePreview.development');\n    this.maxRetries = config.get<number>('maxRetries', 3);\n  }\n\n  public resetRetryAttempts(context: string): void {\n    this.retryAttempts.delete(context);\n  }\n\n  public dispose(): void {\n    this.retryAttempts.clear();\n    this.disposables.forEach(disposable => disposable.dispose());\n    this.disposables = [];\n  }\n}","import * as vscode from 'vscode';\nimport { CommandManagerEnhanced } from './commandManager-enhanced';\nimport { WebviewPanelProvider } from './webviewPanelProvider';\nimport { StatusBarManager } from './statusBarManager';\nimport { LiveReloadManager } from './liveReloadManager';\nimport { CommunicationManager } from './communicationManager';\nimport { ErrorRecoveryManager } from './errorRecoveryManager';\n\nlet commandManager: CommandManagerEnhanced;\nlet webviewPanelProvider: WebviewPanelProvider;\nlet statusBarManager: StatusBarManager;\nlet liveReloadManager: LiveReloadManager;\nlet communicationManager: CommunicationManager;\nlet errorRecoveryManager: ErrorRecoveryManager;\n\nexport function activate(context: vscode.ExtensionContext) {\n  console.log('TBX Live Server extension is now active!');\n  console.log('[Extension] Starting enhanced command manager...');\n\n  try {\n    // Initialize managers\n    communicationManager = new CommunicationManager();\n    errorRecoveryManager = new ErrorRecoveryManager();\n\n    // Initialize enhanced command manager with dependencies\n    commandManager = new CommandManagerEnhanced(\n      communicationManager,\n      errorRecoveryManager\n    );\n\n    webviewPanelProvider = new WebviewPanelProvider(context.extensionUri);\n    statusBarManager = new StatusBarManager();\n\n    // Initialize live reload manager with dependencies\n    liveReloadManager = new LiveReloadManager(\n      communicationManager,\n      errorRecoveryManager\n    );\n\n    console.log('[Extension] Registering commands...');\n\n    // Register commands with enhanced logging\n    const commands = [\n      vscode.commands.registerCommand('extension.inlineLiveServer.goOffline', () => {\n        console.log('[Extension] Executing command: extension.inlineLiveServer.goOffline');\n        commandManager.executeCommand('goOffline');\n      }),\n      vscode.commands.registerCommand('extension.inlineLiveServer.goOnline', (uri?: vscode.Uri) => {\n        console.log('[Extension] Executing command: extension.inlineLiveServer.goOnline', uri ? `with URI: ${uri.fsPath}` : 'without URI');\n        commandManager.executeCommand('goOnline', uri);\n      }),\n      vscode.commands.registerCommand('extension.inlineLiveServer.showFileBrowser', () => {\n        console.log('[Extension] Executing command: extension.inlineLiveServer.showFileBrowser');\n        commandManager.executeCommand('showFileBrowser');\n      }),\n      vscode.commands.registerCommand('extension.inlineLiveServer.changeWorkspace', () => {\n        console.log('[Extension] Executing command: extension.inlineLiveServer.changeWorkspace');\n        commandManager.executeCommand('changeWorkspace');\n      }),\n      vscode.commands.registerCommand('extension.inlineLiveServer.startWebview', () => {\n        console.log('[Extension] Executing command: extension.inlineLiveServer.startWebview');\n        commandManager.executeCommand('startWebview');\n      }),\n      vscode.commands.registerCommand('extension.inlineLiveServer.navigateHome', () => {\n        console.log('[Extension] Executing command: extension.inlineLiveServer.navigateHome');\n        commandManager.executeCommand('navigateHome');\n      }),\n      vscode.commands.registerCommand('extension.inlineLiveServer.zoomIn', () => {\n        console.log('[Extension] Executing command: extension.inlineLiveServer.zoomIn');\n        commandManager.executeCommand('zoomIn');\n      }),\n      vscode.commands.registerCommand('extension.inlineLiveServer.zoomOut', () => {\n        console.log('[Extension] Executing command: extension.inlineLiveServer.zoomOut');\n        commandManager.executeCommand('zoomOut');\n      }),\n      vscode.commands.registerCommand('extension.inlineLiveServer.resetZoom', () => {\n        console.log('[Extension] Executing command: extension.inlineLiveServer.resetZoom');\n        commandManager.executeCommand('resetZoom');\n      }),\n      vscode.commands.registerCommand('extension.inlineLiveServer.toggleSplitView', () => {\n        console.log('[Extension] Executing command: extension.inlineLiveServer.toggleSplitView');\n        commandManager.executeCommand('toggleSplitView');\n      }),\n      vscode.commands.registerCommand('extension.inlineLiveServer.toggleFullScreen', () => {\n        console.log('[Extension] Executing command: extension.inlineLiveServer.toggleFullScreen');\n        commandManager.executeCommand('toggleFullScreen');\n      }),\n      vscode.commands.registerCommand('extension.inlineLiveServer.openDevTools', () => {\n        console.log('[Extension] Executing command: extension.inlineLiveServer.openDevTools');\n        commandManager.executeCommand('openDevTools');\n      }),\n      vscode.commands.registerCommand('extension.inlineLiveServer.inspectElement', () => {\n        console.log('[Extension] Executing command: extension.inlineLiveServer.inspectElement');\n        commandManager.executeCommand('inspectElement');\n      }),\n      vscode.commands.registerCommand('extension.inlineLiveServer.viewSource', () => {\n        console.log('[Extension] Executing command: extension.inlineLiveServer.viewSource');\n        commandManager.executeCommand('viewSource');\n      }),\n      vscode.commands.registerCommand('extension.inlineLiveServer.clearHistory', () => {\n        console.log('[Extension] Executing command: extension.inlineLiveServer.clearHistory');\n        commandManager.executeCommand('clearHistory');\n      }),\n      vscode.commands.registerCommand('extension.inlineLiveServer.saveState', () => {\n        console.log('[Extension] Executing command: extension.inlineLiveServer.saveState');\n        commandManager.executeCommand('saveState');\n      }),\n      vscode.commands.registerCommand('extension.inlineLiveServer.loadState', () => {\n        console.log('[Extension] Executing command: extension.inlineLiveServer.loadState');\n        commandManager.executeCommand('loadState');\n      })\n    ];\n\n    // Register all commands with error handling\n    commands.forEach((command, index) => {\n      try {\n        context.subscriptions.push(command);\n        console.log(`[Extension] Command ${index + 1}/${commands.length} registered successfully`);\n      } catch (error) {\n        console.error(`[Extension] Failed to register command ${index + 1}:`, error);\n        vscode.window.showErrorMessage(`Failed to register command: ${error}`);\n      }\n    });\n\n    console.log(`[Extension] All ${commands.length} commands registered successfully`);\n\n    // Initialize status bar\n    statusBarManager.initialize();\n\n    // Initialize webview provider\n    context.subscriptions.push(\n      vscode.window.registerWebviewPanelSerializer(\n        'tbxLivePreview',\n        webviewPanelProvider\n      )\n    );\n\n    // Initialize communication manager\n    communicationManager.initialize();\n\n    // Initialize error recovery\n    errorRecoveryManager.initialize();\n\n    console.log('[Extension] Inline Live Server extension activated successfully!');\n  } catch (error) {\n    console.error('[Extension] Error during activation:', error);\n    vscode.window.showErrorMessage(`Extension activation failed: ${error}`);\n  }\n}\n\nexport function deactivate() {\n  console.log('[Extension] TBX Live Server extension is now deactivated!');\n\n  try {\n    // Cleanup managers\n    if (liveReloadManager) {\n      liveReloadManager.dispose();\n    }\n\n    if (communicationManager) {\n      communicationManager.dispose();\n    }\n\n    if (errorRecoveryManager) {\n      errorRecoveryManager.dispose();\n    }\n\n    if (statusBarManager) {\n      statusBarManager.dispose();\n    }\n\n    if (commandManager) {\n      commandManager.dispose();\n    }\n\n    console.log('[Extension] Cleanup completed successfully');\n  } catch (error) {\n    console.error('[Extension] Error during deactivation:', error);\n  }\n}\n","import * as vscode from 'vscode';\nimport { CommunicationManager } from './communicationManager';\nimport { ErrorRecoveryManager } from './errorRecoveryManager';\n\nexport class LiveReloadManager {\n  private disposables: vscode.Disposable[] = [];\n  private fileWatcher: vscode.FileSystemWatcher | null = null;\n  private isEnabled: boolean = false;\n  private commandManager: any = null; // Will be set by CommandManager\n\n  constructor(\n    private communicationManager: CommunicationManager,\n    private errorRecoveryManager: ErrorRecoveryManager\n  ) {\n    // Private constructor for singleton pattern\n  }\n\n  public setCommandManager(commandManager: any): void {\n    this.commandManager = commandManager;\n  }\n\n  public initialize(): void {\n    // Set up file system watcher for live reload\n    this.setupFileWatcher();\n\n    // Register for configuration changes\n    vscode.workspace.onDidChangeConfiguration(\n      (e) => {\n        if (e.affectsConfiguration('liveServer.settings')) {\n          this.handleConfigurationChange();\n        }\n      },\n      null,\n      this.disposables\n    );\n\n    this.isEnabled = true;\n  }\n\n  private setupFileWatcher(): void {\n    // Watch for file changes in workspace\n    const pattern = '**/*.{html,css,js,ts,jsx,tsx,json,md}';\n    this.fileWatcher = vscode.workspace.createFileSystemWatcher(pattern);\n\n    this.fileWatcher.onDidChange(\n      (uri) => this.handleFileChange(uri, 'changed'),\n      null,\n      this.disposables\n    );\n\n    this.fileWatcher.onDidCreate(\n      (uri) => this.handleFileChange(uri, 'created'),\n      null,\n      this.disposables\n    );\n\n    this.fileWatcher.onDidDelete(\n      (uri) => this.handleFileChange(uri, 'deleted'),\n      null,\n      this.disposables\n    );\n  }\n\n  private handleFileChange(uri: vscode.Uri, changeType: 'changed' | 'created' | 'deleted'): void {\n    if (!this.isEnabled) {\n      return;\n    }\n\n    // Check if file should be ignored\n    const config = vscode.workspace.getConfiguration('liveServer.settings');\n    const ignoreFiles = config.get<string[]>('ignoreFiles', []);\n\n    const relativePath = vscode.workspace.asRelativePath(uri);\n    const shouldIgnore = ignoreFiles.some(pattern => {\n      return relativePath.includes(pattern.replace('**', ''));\n    });\n\n    if (shouldIgnore) {\n      return;\n    }\n\n    // Send file change notification to webview\n    if (this.commandManager) {\n      this.commandManager.sendFileChangeMessage(relativePath, changeType);\n    } else {\n      // Fallback to communication manager\n      const message = {\n        type: 'fileChange',\n        payload: {\n          file: relativePath,\n          changeType: changeType,\n          timestamp: Date.now()\n        }\n      };\n      this.communicationManager.sendMessage(message as any);\n    }\n\n    // Trigger live reload\n    this.triggerLiveReload();\n  }\n\n  private triggerLiveReload(): void {\n    // Send live reload command to webview\n    if (this.commandManager) {\n      this.commandManager.sendLiveReloadMessage();\n    } else {\n      // Fallback to communication manager\n      const message = {\n        type: 'liveReload',\n        payload: {\n          action: 'reload',\n          timestamp: Date.now()\n        }\n      };\n      this.communicationManager.sendMessage(message as any);\n    }\n  }\n\n  private handleConfigurationChange(): void {\n    // Handle configuration changes that affect live reload\n    const config = vscode.workspace.getConfiguration('liveServer.settings');\n    const fullReload = config.get<boolean>('fullReload', false);\n\n    if (fullReload) {\n      this.triggerLiveReload();\n    }\n  }\n\n  public setEnabled(enabled: boolean): void {\n    this.isEnabled = enabled;\n  }\n\n  public isLiveReloadEnabled(): boolean {\n    return this.isEnabled;\n  }\n\n  public dispose(): void {\n    this.isEnabled = false;\n\n    if (this.fileWatcher) {\n      this.fileWatcher.dispose();\n      this.fileWatcher = null;\n    }\n\n    this.disposables.forEach(disposable => disposable.dispose());\n    this.disposables = [];\n  }\n}","import * as vscode from 'vscode';\n\nexport type ServerState = 'stopped' | 'running' | 'error';\n\nexport class StatusBarManager {\n  private statusBarItem: vscode.StatusBarItem;\n  private serverState: ServerState = 'stopped';\n\n  constructor() {\n    this.statusBarItem = vscode.window.createStatusBarItem(\n      vscode.StatusBarAlignment.Left,\n      100\n    );\n  }\n\n  public initialize(): void {\n    this.statusBarItem.command = 'extension.inlineLiveServer.showFileBrowser';\n    this.updateServerState(this.serverState);\n    this.statusBarItem.show();\n  }\n\n  public updateServerState(state: ServerState, runningCount: number = 0): void {\n    this.serverState = state;\n\n    switch (state) {\n      case 'stopped':\n        this.statusBarItem.text = '$(circle-slash) Inline Live Server';\n        this.statusBarItem.tooltip = 'Inline Live Server - Click to browse files';\n        this.statusBarItem.command = 'extension.inlineLiveServer.showFileBrowser';\n        this.statusBarItem.backgroundColor = undefined;\n        break;\n      case 'running':\n        if (runningCount > 1) {\n          this.statusBarItem.text = `$(broadcast) Inline Live Server (${runningCount})`;\n          this.statusBarItem.tooltip = `${runningCount} Inline Live Server servers running`;\n        } else {\n          this.statusBarItem.text = '$(circle-filled) Inline Live Server';\n          this.statusBarItem.tooltip = 'Inline Live Server - Server running';\n        }\n        this.statusBarItem.command = 'extension.inlineLiveServer.goOffline';\n        this.statusBarItem.backgroundColor = new vscode.ThemeColor(\n          'statusBarItem.prominentBackground'\n        );\n        break;\n      case 'error':\n        this.statusBarItem.text = '$(error) Inline Live Server';\n        this.statusBarItem.tooltip = 'Inline Live Server - Server error, click to browse files';\n        this.statusBarItem.command = 'extension.inlineLiveServer.showFileBrowser';\n        this.statusBarItem.backgroundColor = new vscode.ThemeColor(\n          'statusBarItem.errorBackground'\n        );\n        break;\n    }\n  }\n\n  public getServerState(): ServerState {\n    return this.serverState;\n  }\n\n  public dispose(): void {\n    if (this.statusBarItem) {\n      this.statusBarItem.dispose();\n    }\n  }\n}\n","import * as vscode from 'vscode';\nimport { WebviewPanelState } from './communicationTypes';\n\nexport class WebviewPanelProvider implements vscode.WebviewPanelSerializer {\n  private panels: Map<string, vscode.WebviewPanel> = new Map();\n\n  constructor(private extensionUri: vscode.Uri) {\n    // Private constructor for singleton pattern\n  }\n\n  public async deserializeWebviewPanel(\n    webviewPanel: vscode.WebviewPanel,\n    state: any\n  ): Promise<void> {\n    // Restore webview panel state\n    this.panels.set(webviewPanel.viewColumn?.toString() || 'main', webviewPanel);\n    this.setupWebviewPanel(webviewPanel, state);\n  }\n\n  public createWebviewPanel(\n    viewColumn: vscode.ViewColumn = vscode.ViewColumn.One,\n    preserveFocus: boolean = false\n  ): vscode.WebviewPanel {\n    const panel = vscode.window.createWebviewPanel(\n      'tbxLivePreview',\n      'Inline Live Server',\n      viewColumn,\n      {\n        enableScripts: true,\n        retainContextWhenHidden: true,\n        enableFindWidget: true,\n        localResourceRoots: [this.extensionUri]\n      }\n    );\n\n    this.panels.set(viewColumn.toString(), panel);\n    this.setupWebviewPanel(panel);\n\n    return panel;\n  }\n\n  private setupWebviewPanel(panel: vscode.WebviewPanel, state?: WebviewPanelState): void {\n    // Set up webview content\n    panel.webview.html = this.getWebviewContent();\n\n    // Handle panel events\n    panel.onDidDispose(() => {\n      this.panels.delete(panel.viewColumn?.toString() || 'main');\n    });\n\n    panel.onDidChangeViewState(() => {\n      // Handle view state changes\n    });\n\n    // Handle messages from webview\n    panel.webview.onDidReceiveMessage(\n      (message) => {\n        this.handleWebviewMessage(message, panel);\n      }\n    );\n  }\n\n  private getWebviewContent(): string {\n    // Return HTML content for the webview\n    return `<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Inline Live Server</title>\n    <style>\n        body {\n            margin: 0;\n            padding: 0;\n            font-family: var(--vscode-font-family);\n            font-size: var(--vscode-font-size);\n            background-color: var(--vscode-editor-background);\n            color: var(--vscode-editor-foreground);\n            height: 100vh;\n        }\n        .container {\n            display: flex;\n            flex-direction: column;\n            height: 100vh;\n        }\n        .toolbar {\n            display: flex;\n            align-items: center;\n            gap: 12px;\n            padding: 12px 16px;\n            background: linear-gradient(135deg, var(--vscode-editorWidget-background) 0%, var(--vscode-sideBar-background) 100%);\n            border-bottom: 1px solid var(--vscode-panel-border);\n            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);\n            min-height: 56px;\n        }\n        .address-bar {\n            flex: 1;\n            padding: 8px 12px;\n            background-color: var(--vscode-input-background);\n            color: var(--vscode-input-foreground);\n            border: 1px solid var(--vscode-input-border);\n            border-radius: 6px;\n            font-family: var(--vscode-editor-font-family);\n            font-size: 13px;\n            transition: all 0.2s ease;\n        }\n        .address-bar:focus {\n            outline: none;\n            border-color: var(--vscode-focusBorder);\n            box-shadow: 0 0 0 2px var(--vscode-focusBorder);\n        }\n        .toolbar button {\n            padding: 8px 16px;\n            background-color: var(--vscode-button-background);\n            color: var(--vscode-button-foreground);\n            border: none;\n            border-radius: 6px;\n            cursor: pointer;\n            font-size: 13px;\n            font-weight: 500;\n            font-family: var(--vscode-font-family);\n            transition: all 0.2s ease;\n            min-height: 32px;\n        }\n        .toolbar button:hover {\n            background-color: var(--vscode-button-hoverBackground);\n            transform: translateY(-1px);\n            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);\n        }\n        .toolbar button:active {\n            transform: translateY(0);\n            box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);\n        }\n        .content {\n            flex: 1;\n            background-color: var(--vscode-editorWidget-background);\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            padding: 40px;\n            text-align: center;\n        }\n        .content p {\n            color: var(--vscode-descriptionForeground);\n            font-size: 14px;\n            line-height: 1.5;\n            margin: 8px 0;\n        }\n        .status-bar {\n            padding: 8px 16px;\n            background-color: var(--vscode-statusBar-background);\n            color: var(--vscode-statusBar-foreground);\n            font-size: 12px;\n            border-top: 1px solid var(--vscode-panel-border);\n            display: flex;\n            align-items: center;\n            gap: 8px;\n        }\n        .status-indicator {\n            width: 8px;\n            height: 8px;\n            border-radius: 50%;\n            background-color: var(--vscode-charts-green);\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"toolbar\">\n            <input type=\"text\" class=\"address-bar\" placeholder=\"Enter URL or file path...\" />\n            <button onclick=\"navigateHome()\">Home</button>\n            <button onclick=\"refresh()\">Refresh</button>\n            <button onclick=\"toggleDevTools()\">Dev Tools</button>\n        </div>\n        <div class=\"content\" id=\"content\">\n            <p>Inline Live Server Panel</p>\n            <p>Server will start when you open a file or use the command palette.</p>\n        </div>\n        <div class=\"status-bar\" id=\"status-bar\">\n            <div class=\"status-indicator\"></div>\n            <span>Ready</span>\n        </div>\n    </div>\n\n    <script>\n        const vscode = acquireVsCodeApi();\n        const content = document.getElementById('content');\n        const statusBar = document.getElementById('status-bar');\n        const addressBar = document.querySelector('.address-bar');\n\n        // Handle messages from extension\n        window.addEventListener('message', event => {\n            const message = event.data;\n            switch (message.type) {\n                case 'update':\n                    content.innerHTML = message.html || message.text || 'No content';\n                    break;\n                case 'navigate':\n                    if (message.url) {\n                        addressBar.value = message.url;\n                    }\n                    break;\n                case 'status':\n                    statusBar.textContent = message.text || 'Ready';\n                    break;\n            }\n        });\n\n        function navigateHome() {\n            vscode.postMessage({ type: 'navigateHome' });\n        }\n\n        function refresh() {\n            vscode.postMessage({ type: 'refresh' });\n        }\n\n        function toggleDevTools() {\n            vscode.postMessage({ type: 'toggleDevTools' });\n        }\n\n        addressBar.addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') {\n                vscode.postMessage({\n                    type: 'navigate',\n                    url: addressBar.value\n                });\n            }\n        });\n    </script>\n</body>\n</html>`;\n  }\n\n  private handleWebviewMessage(message: any, panel: vscode.WebviewPanel): void {\n    switch (message.type) {\n      case 'navigateHome':\n        vscode.commands.executeCommand('extension.inlineLiveServer.navigateHome');\n        break;\n      case 'refresh':\n        vscode.commands.executeCommand('extension.inlineLiveServer.goOnline');\n        break;\n      case 'toggleDevTools':\n        vscode.commands.executeCommand('extension.inlineLiveServer.openDevTools');\n        break;\n      case 'navigate':\n        if (message.url) {\n          // Handle navigation to specific URL\n          console.log('Navigate to:', message.url);\n        }\n        break;\n    }\n  }\n\n  public getPanel(viewColumn: vscode.ViewColumn): vscode.WebviewPanel | undefined {\n    return this.panels.get(viewColumn.toString());\n  }\n\n  public dispose(): void {\n    this.panels.forEach(panel => panel.dispose());\n    this.panels.clear();\n  }\n}","module.exports = require(\"live-server\");","module.exports = require(\"path\");","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/extension-enhanced.ts\");\n",""],"names":[],"sourceRoot":""}