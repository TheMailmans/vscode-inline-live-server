name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  VSCODE_VERSION: '1.74.0'

jobs:
  # ============================================================================
  # LINT AND TYPE CHECKING
  # ============================================================================
  lint-and-typecheck:
    name: Lint and Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run test:lint

      - name: Type checking
        run: npx tsc --noEmit

  # ============================================================================
  # UNIT TESTS WITH COVERAGE
  # ============================================================================
  unit-tests:
    name: Unit Tests (${{ matrix.os }}, Node ${{ matrix.node-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: ['16', '18', '20']
        exclude:
          # Reduce matrix size for faster CI
          - os: macos-latest
            node-version: '16'
          - os: windows-latest
            node-version: '20'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build extension
        run: npm run compile

      - name: Run unit tests
        run: npm run test:unit

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}-node${{ matrix.node-version }}
          path: |
            test-results/
            coverage/
            *.log

  # ============================================================================
  # SMOKE TESTS
  # ============================================================================
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build extension
        run: npm run compile

      - name: Run smoke tests
        run: npx ts-node test/smoke-tests.ts

      - name: Upload smoke test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: smoke-test-results
          path: |
            test-results/
            *.log

  # ============================================================================
  # END-TO-END TESTS
  # ============================================================================
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: smoke-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build extension
        run: npm run compile

      - name: Install VS Code Extension Host
        run: npm install -g @vscode/test-electron

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            test-results/
            wdio-reports/
            *.log

  # ============================================================================
  # BUILD AND PACKAGE VALIDATION
  # ============================================================================
  build-and-package:
    name: Build and Package Validation
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build extension (development)
        run: npm run compile:dev

      - name: Build extension (production)
        run: npm run compile:prod

      - name: Verify build output
        run: |
          ls -la dist/
          test -f dist/extension.js
          test -f dist/extension.js.map

      - name: Run pre-publish checks
        run: npm run prepublishOnly

      - name: Package extension
        run: npx vsce package --no-dependencies

      - name: Verify package
        run: |
          ls -la *.vsix
          PACKAGE_SIZE=$(stat -c%s *.vsix)
          echo "Package size: $PACKAGE_SIZE bytes"
          # VS Code marketplace limit is 256MB, warn if over 50MB
          if [ $PACKAGE_SIZE -gt 52428800 ]; then
            echo "⚠️ Warning: Package size ($PACKAGE_SIZE bytes) exceeds 50MB"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extension-package
          path: |
            *.vsix
            dist/
          retention-days: 30

  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build-and-package
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run security scan with Snyk
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ============================================================================
  # MULTI-PLATFORM COMPATIBILITY TEST
  # ============================================================================
  platform-compatibility:
    name: Platform Compatibility Test
    runs-on: ${{ matrix.os }}
    needs: build-and-package
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        vscode-version: ['1.74.0', '1.80.0', '1.85.0']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build extension
        run: npm run compile

      - name: Download VS Code ${{ matrix.vscode-version }}
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            wget -O vscode.tar.gz "https://update.code.visualstudio.com/${{ matrix.vscode-version }}/linux-x64/stable"
            mkdir vscode
            tar -xzf vscode.tar.gz -C vscode --strip-components 1
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            curl -L -o vscode.zip "https://update.code.visualstudio.com/${{ matrix.vscode-version }}/win32-x64/stable"
            7z x vscode.zip -ovscode
          else
            curl -L -o vscode.zip "https://update.code.visualstudio.com/${{ matrix.vscode-version }}/darwin-universal/stable"
            unzip vscode.zip -d vscode
          fi

      - name: Install extension in VS Code
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            ./vscode/bin/code --install-extension *.vsix --force
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            ./vscode/bin/code.cmd --install-extension *.vsix --force
          else
            ./vscode/Contents/Resources/app/bin/code --install-extension *.vsix --force
          fi
        working-directory: .

      - name: Test extension functionality
        run: |
          echo "Testing extension on ${{ matrix.os }} with VS Code ${{ matrix.vscode-version }}"
          # Basic functionality test - extension should load without errors
          timeout 30s npm run test:unit || true

  # ============================================================================
  # PERFORMANCE AND BUNDLE ANALYSIS
  # ============================================================================
  performance-analysis:
    name: Performance and Bundle Analysis
    runs-on: ubuntu-latest
    needs: build-and-package
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build with bundle analysis
        run: npm run build:analyze

      - name: Check bundle size
        run: |
          if [ -f "bundle-analysis.html" ]; then
            echo "Bundle analysis generated successfully"
            ls -lh bundle-analysis.html
          fi

          # Check main bundle size
          MAIN_BUNDLE_SIZE=$(stat -c%s dist/extension.js 2>/dev/null || echo "0")
          echo "Main bundle size: $MAIN_BUNDLE_SIZE bytes"

          # Warn if bundle is too large
          if [ $MAIN_BUNDLE_SIZE -gt 10485760 ]; then
            echo "⚠️ Warning: Main bundle size ($MAIN_BUNDLE_SIZE bytes) exceeds 10MB"
          fi

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: |
            bundle-analysis.html
            dist/extension.js.map

  # ============================================================================
  # QUALITY GATE
  # ============================================================================
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [
      lint-and-typecheck,
      unit-tests,
      smoke-tests,
      e2e-tests,
      build-and-package,
      security-scan,
      platform-compatibility,
      performance-analysis
    ]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check job results
        run: |
          echo "Checking all job results..."

          # Check individual job results
          if [ "${{ needs.lint-and-typecheck.result }}" == "failure" ]; then
            echo "❌ lint-and-typecheck failed"
            exit 1
          fi

          if [ "${{ needs.unit-tests.result }}" == "failure" ]; then
            echo "❌ unit-tests failed"
            exit 1
          fi

          if [ "${{ needs.smoke-tests.result }}" == "failure" ]; then
            echo "❌ smoke-tests failed"
            exit 1
          fi

          if [ "${{ needs.e2e-tests.result }}" == "failure" ]; then
            echo "❌ e2e-tests failed"
            exit 1
          fi

          if [ "${{ needs.build-and-package.result }}" == "failure" ]; then
            echo "❌ build-and-package failed"
            exit 1
          fi

          if [ "${{ needs.security-scan.result }}" == "failure" ]; then
            echo "❌ security-scan failed"
            exit 1
          fi

          if [ "${{ needs.platform-compatibility.result }}" == "failure" ]; then
            echo "❌ platform-compatibility failed"
            exit 1
          fi

          if [ "${{ needs.performance-analysis.result }}" == "failure" ]; then
            echo "❌ performance-analysis failed"
            exit 1
          fi

          echo "✅ Quality gate passed! All required jobs completed successfully."

      - name: Generate quality report
        run: |
          echo "# Quality Gate Report" > quality-report.md
          echo "Generated on: $(date)" >> quality-report.md
          echo "" >> quality-report.md
          echo "## Job Results" >> quality-report.md
          echo "- Lint and Type Check: ${{ needs.lint-and-typecheck.result }}" >> quality-report.md
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> quality-report.md
          echo "- Smoke Tests: ${{ needs.smoke-tests.result }}" >> quality-report.md
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> quality-report.md
          echo "- Build and Package: ${{ needs.build-and-package.result }}" >> quality-report.md
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> quality-report.md
          echo "- Platform Compatibility: ${{ needs.platform-compatibility.result }}" >> quality-report.md
          echo "- Performance Analysis: ${{ needs.performance-analysis.result }}" >> quality-report.md

      - name: Upload quality report
        uses: actions/upload-artifact@v4
        with:
          name: quality-gate-report
          path: quality-report.md

  # ============================================================================
  # NOTIFICATION
  # ============================================================================
  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: quality-gate
    if: always()
    steps:
      - name: Notify success
        if: needs.quality-gate.result == 'success'
        run: |
          echo "🎉 All tests passed! Ready for deployment."
          # Add notification logic here (Slack, Discord, etc.)

      - name: Notify failure
        if: needs.quality-gate.result == 'failure'
        run: |
          echo "❌ Quality gate failed. Check the logs for details."
          # Add notification logic here (Slack, Discord, etc.)