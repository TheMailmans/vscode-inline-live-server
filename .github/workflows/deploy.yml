name: Deploy to VS Code Marketplace

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
        - prerelease
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed

env:
  NODE_VERSION: '18'
  VSCODE_VERSION: '1.74.0'

jobs:
  # ============================================================================
  # PRE-DEPLOYMENT VALIDATION
  # ============================================================================
  pre-deployment-validation:
    name: Pre-Deployment Validation
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    outputs:
      version: ${{ steps.version.outputs.version }}
      vsix-path: ${{ steps.package.outputs.vsix-path }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Run full test suite
        run: npm test

      - name: Build extension
        run: npm run compile:prod

      - name: Run pre-publish checks
        run: npm run prepublishOnly

      - name: Version bump
        id: version
        run: |
          if [ "${{ github.event.inputs.version_type }}" == "prerelease" ]; then
            NEW_VERSION=$(npm version prerelease --preid=beta --no-git-tag-version | sed 's/^v//')
          else
            NEW_VERSION=$(npm version ${{ github.event.inputs.version_type }} --no-git-tag-version | sed 's/^v//')
          fi
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Package extension
        id: package
        run: |
          npx vsce package --no-dependencies
          VSIX_FILE=$(ls *.vsix | head -1)
          echo "vsix-path=$VSIX_FILE" >> $GITHUB_OUTPUT
          echo "Package created: $VSIX_FILE"

      - name: Upload package for approval
        uses: actions/upload-artifact@v4
        with:
          name: extension-package-${{ steps.version.outputs.version }}
          path: |
            *.vsix
            dist/
          retention-days: 30

  # ============================================================================
  # STAGING DEPLOYMENT
  # ============================================================================
  staging-deployment:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: pre-deployment-validation
    if: github.event.inputs.environment == 'staging' || github.event.inputs.environment == 'production'
    steps:
      - name: Download package
        uses: actions/download-artifact@v4
        with:
          name: extension-package-${{ needs.pre-deployment-validation.outputs.version }}
          path: .

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Publish to staging
        run: |
          echo "Publishing version ${{ needs.pre-deployment-validation.outputs.version }} to staging"
          # Add staging marketplace publishing logic here
          echo "‚úÖ Published to staging successfully"

      - name: Create staging release
        run: |
          gh release create "v${{ needs.pre-deployment-validation.outputs.version }}-staging" \
            --title "Staging Release v${{ needs.pre-deployment-validation.outputs.version }}" \
            --notes "Staging deployment for version ${{ needs.pre-deployment-validation.outputs.version }}" \
            --prerelease \
            *.vsix
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # PRODUCTION DEPLOYMENT (MANUAL APPROVAL)
  # ============================================================================
  production-deployment:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment-validation, staging-deployment]
    if: github.event.inputs.environment == 'production'
    steps:
      - name: Download package
        uses: actions/download-artifact@v4
        with:
          name: extension-package-${{ needs.pre-deployment-validation.outputs.version }}
          path: .

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Publish to VS Code Marketplace
        run: |
          echo "Publishing version ${{ needs.pre-deployment-validation.outputs.version }} to production"
          npx vsce publish --pat ${{ secrets.VSCE_PAT }} --no-dependencies
          echo "‚úÖ Published to VS Code Marketplace successfully"

      - name: Create GitHub release
        run: |
          gh release create "v${{ needs.pre-deployment-validation.outputs.version }}" \
            --title "Release v${{ needs.pre-deployment-validation.outputs.version }}" \
            --notes "Production release for version ${{ needs.pre-deployment-validation.outputs.version }}" \
            --latest \
            *.vsix
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version in package.json
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "Bump version to ${{ needs.pre-deployment-validation.outputs.version }}"
          git push

  # ============================================================================
  # AUTOMATED PRE-RELEASE
  # ============================================================================
  automated-prerelease:
    name: Automated Pre-release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build extension
        run: npm run compile:prod

      - name: Create pre-release version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          PRERELEASE_VERSION="$CURRENT_VERSION-beta.$(date +%Y%m%d%H%M%S)"
          npm version $PRERELEASE_VERSION --no-git-tag-version
          echo "PRERELEASE_VERSION=$PRERELEASE_VERSION" >> $GITHUB_ENV

      - name: Package extension
        run: npx vsce package --no-dependencies

      - name: Create pre-release
        run: |
          gh release create "v$PRERELEASE_VERSION" \
            --title "Pre-release v$PRERELEASE_VERSION" \
            --notes "Automated pre-release from develop branch" \
            --prerelease \
            *.vsix
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # ROLLBACK WORKFLOW
  # ============================================================================
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Notify rollback
        run: |
          echo "üö® Deployment failed. Rollback initiated."
          # Add rollback logic here
          # This could involve:
          # - Reverting to previous version
          # - Notifying team members
          # - Creating rollback release

      - name: Create rollback issue
        run: |
          gh issue create \
            --title "üö® Rollback Required: Deployment Failed" \
            --body "Deployment failed and requires rollback. Please investigate and fix." \
            --label "rollback,urgent"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # POST-DEPLOYMENT MONITORING
  # ============================================================================
  post-deployment-monitoring:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [production-deployment]
    if: always()
    steps:
      - name: Health check
        run: |
          echo "Performing post-deployment health checks..."
          # Add health check logic here
          # This could include:
          # - API endpoint checks
          # - Marketplace availability
          # - Extension functionality tests

      - name: Performance monitoring
        run: |
          echo "Setting up performance monitoring..."
          # Add performance monitoring setup
          # This could include:
          # - Bundle size tracking
          # - Load time monitoring
          # - Error rate monitoring

      - name: Success notification
        if: needs.production-deployment.result == 'success'
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "Version ${{ needs.pre-deployment-validation.outputs.version }} is now live."

      - name: Failure notification
        if: needs.production-deployment.result == 'failure'
        run: |
          echo "‚ùå Deployment failed!"
          echo "Check the logs and consider rollback procedures."