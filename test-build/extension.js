/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/vsls/vscode.ts":
/*!*************************************!*\
  !*** ./node_modules/vsls/vscode.ts ***!
  \*************************************/
/***/ (() => {



/***/ }),

/***/ "./src/Config.ts":
/*!***********************!*\
  !*** ./src/Config.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Config = void 0;\nconst vscode_1 = __webpack_require__(/*! vscode */ \"vscode\");\nclass Config {\n    static get configuration() {\n        return vscode_1.workspace.getConfiguration('liveServer.settings');\n    }\n    static getSettings(val) {\n        return Config.configuration.get(val);\n    }\n    static setSettings(key, val, isGlobal = false) {\n        return Config.configuration.update(key, val, isGlobal);\n    }\n    static get getHost() {\n        return Config.getSettings('host');\n    }\n    static get getLocalIp() {\n        return Config.getSettings('useLocalIp');\n    }\n    static get getPort() {\n        return Config.getSettings('port');\n    }\n    static setPort(port) {\n        return Config.setSettings('port', port);\n    }\n    static get getRoot() {\n        return Config.getSettings('root');\n    }\n    static get getNoBrowser() {\n        return Config.getSettings('NoBrowser');\n    }\n    static get getAdvancedBrowserCmdline() {\n        return Config.getSettings('AdvanceCustomBrowserCmdLine');\n    }\n    static get getChromeDebuggingAttachment() {\n        return Config.getSettings('ChromeDebuggingAttachment');\n    }\n    static get getCustomBrowser() {\n        return Config.getSettings('CustomBrowser');\n    }\n    static get getIgnoreFiles() {\n        return Config.getSettings('ignoreFiles');\n    }\n    static get getDonotShowInfoMsg() {\n        return Config.getSettings('donotShowInfoMsg');\n    }\n    static setDonotShowInfoMsg(val, isGlobal = false) {\n        Config.configuration.update('donotShowInfoMsg', val, isGlobal);\n    }\n    static get getDonotVerifyTags() {\n        return Config.getSettings('donotVerifyTags');\n    }\n    static setDonotVerifyTags(val, isGlobal = false) {\n        Config.configuration.update('donotVerifyTags', val, isGlobal);\n    }\n    static get getUseWebExt() {\n        return Config.getSettings('useWebExt') || false;\n    }\n    static get getProxy() {\n        return Config.getSettings('proxy');\n    }\n    static get getHttps() {\n        return Config.getSettings('https') || {};\n    }\n    static get getWait() {\n        return Config.getSettings('wait');\n    }\n    static get getfullReload() {\n        return Config.getSettings('fullReload');\n    }\n    static get getMount() {\n        return Config.getSettings('mount');\n    }\n    static get getShowOnStatusbar() {\n        return Config.getSettings('showOnStatusbar') || false;\n    }\n    static get getFile() {\n        return Config.getSettings('file');\n    }\n    static get getMultiRootWorkspaceName() {\n        return Config.getSettings('multiRootWorkspaceName');\n    }\n    static setMultiRootWorkspaceName(val) {\n        return Config.configuration.update('multiRootWorkspaceName', val, false);\n    }\n}\nexports.Config = Config;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Config.ts\n\n}");

/***/ }),

/***/ "./src/Helper.ts":
/*!***********************!*\
  !*** ./src/Helper.ts ***!
  \***********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("{\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Helper = exports.isRelativePath = exports.SUPPORTED_EXT = void 0;\nconst fs = __importStar(__webpack_require__(/*! fs */ \"fs\"));\nconst path = __importStar(__webpack_require__(/*! path */ \"path\"));\nconst Config_1 = __webpack_require__(/*! ./Config */ \"./src/Config.ts\");\nexports.SUPPORTED_EXT = [\n    '.html', '.htm', '.svg'\n];\nconst isRelativePath = (pathUrl) => {\n    if (pathUrl.startsWith('*'))\n        return false;\n    return !path.isAbsolute(pathUrl);\n};\nexports.isRelativePath = isRelativePath;\nclass Helper {\n    static testPathWithRoot(workSpacePath) {\n        let rootPath;\n        // Test the path is actually exists or not\n        const testPath = path.join(workSpacePath, Config_1.Config.getRoot);\n        let isNotOkay = !fs.existsSync(testPath);\n        if (!isNotOkay) { // means okay :)\n            rootPath = testPath;\n        }\n        else {\n            rootPath = workSpacePath;\n        }\n        if (!rootPath.endsWith(path.sep))\n            rootPath = rootPath + path.sep;\n        return {\n            isNotOkay,\n            rootPath\n        };\n    }\n    /**\n     * This function return the remaining path from root to target.\n     * e.g. : root is `c:\\user\\rootfolder\\` and target is `c:\\user\\rootfolder\\subfolder\\index.html`\n     * then this function will return `subfolder\\index.html` as html is a supported otherwise it will return null.\n     *\n     * @param rootPath\n     * @param targetPath\n     */\n    static getSubPath(rootPath, targetPath) {\n        if (!Helper.IsSupportedFile(targetPath) || !targetPath.startsWith(rootPath)) {\n            return null;\n        }\n        return targetPath.substring(rootPath.length, targetPath.length);\n    }\n    /**\n     * It returns true if file is supported. input can be in full file path or just filename with extension name.\n     * @param file: can be path/subpath/file.ts or file.ts\n     */\n    static IsSupportedFile(file) {\n        let ext = path.extname(file) || (file.startsWith('.') ? file : `.${file}`);\n        return exports.SUPPORTED_EXT.indexOf(ext.toLowerCase()) > -1;\n    }\n    /**\n     *\n     * @param rootPath\n     * @param workspacePath\n     * @param onTagMissedCallback\n     */\n    static generateParams(rootPath, workspacePath, onTagMissedCallback) {\n        workspacePath = workspacePath || '';\n        const port = Config_1.Config.getPort;\n        const ignorePathGlob = Config_1.Config.getIgnoreFiles || [];\n        const ignoreFiles = [];\n        ignorePathGlob.forEach(ignoredPath => {\n            if ((0, exports.isRelativePath)(ignoredPath))\n                ignoreFiles.push(path.join(workspacePath, ignoredPath));\n            else\n                ignoreFiles.push(ignoredPath);\n        });\n        const proxy = Helper.getProxySetup();\n        const https = Helper.getHttpsSetup();\n        const mount = Config_1.Config.getMount;\n        // In live-server mountPath is reslove by `path.resolve(process.cwd(), mountRule[1])`.\n        // but in vscode `process.cwd()` is the vscode extensions path.\n        // The correct path should be resolve by workspacePath.\n        mount.forEach((mountRule) => {\n            if (mountRule.length === 2 && mountRule[1]) {\n                mountRule[1] = path.resolve(workspacePath, mountRule[1]);\n            }\n        });\n        const file = Config_1.Config.getFile;\n        return {\n            port: port,\n            host: '0.0.0.0',\n            root: rootPath,\n            file: file,\n            open: false,\n            https: https,\n            ignore: ignoreFiles,\n            disableGlobbing: true,\n            proxy: proxy,\n            cors: true,\n            wait: Config_1.Config.getWait || 100,\n            fullReload: Config_1.Config.getfullReload,\n            useBrowserExtension: Config_1.Config.getUseWebExt,\n            onTagMissedCallback: onTagMissedCallback,\n            mount: mount\n        };\n    }\n    static getHttpsSetup() {\n        const httpsConfig = Config_1.Config.getHttps;\n        let https = null;\n        if (httpsConfig.enable === true) {\n            let cert = fs.readFileSync(httpsConfig.cert, 'utf8');\n            let key = fs.readFileSync(httpsConfig.key, 'utf8');\n            https = {\n                cert: cert,\n                key: key,\n                passphrase: httpsConfig.passphrase\n            };\n        }\n        return https;\n    }\n    static getProxySetup() {\n        const proxySetup = Config_1.Config.getProxy;\n        let proxy = [[]];\n        if (proxySetup.enable === true) {\n            proxy[0].push(proxySetup.baseUri, proxySetup.proxyUri);\n        }\n        else {\n            proxy = null; // required to change the type [[]] to black array [].\n        }\n        return proxy;\n    }\n}\nexports.Helper = Helper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/Helper.ts\n\n}");

/***/ }),

/***/ "./src/LiveServerHelper.ts":
/*!*********************************!*\
  !*** ./src/LiveServerHelper.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LiveServerHelper = void 0;\nclass LiveServerHelper {\n    static StartServer(params, callback) {\n        setTimeout(() => {\n            try {\n                let ServerInstance = (__webpack_require__(/*! live-server */ \"live-server\").start)(params);\n                setTimeout(() => {\n                    if (!ServerInstance._connectionKey) {\n                        return callback({});\n                    }\n                    __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'http-shutdown'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()))(ServerInstance);\n                    return callback(ServerInstance);\n                }, 1000);\n            }\n            catch (err) {\n                console.error(err);\n                callback({\n                    errorMsg: err\n                });\n            }\n        }, 0);\n    }\n    static StopServer(LiveServerInstance, callback) {\n        LiveServerInstance.shutdown(() => {\n            // callback(); /*only Working first time, Unknown Bug*/\n        });\n        LiveServerInstance.close();\n        (__webpack_require__(/*! live-server */ \"live-server\").shutdown)();\n        setTimeout(() => { callback(); }, 1000);\n    }\n}\nexports.LiveServerHelper = LiveServerHelper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvTGl2ZVNlcnZlckhlbHBlci50cyIsIm1hcHBpbmdzIjoiQUFBYTs7O0FBRWIsTUFBYSxnQkFBZ0I7SUFFekIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsUUFBUTtRQUMvQixVQUFVLENBQUMsR0FBRyxFQUFFO1lBQ1osSUFBSTtnQkFDQSxJQUFJLGNBQWMsR0FBRyw2REFBNEIsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDMUQsVUFBVSxDQUFDLEdBQUcsRUFBRTtvQkFFWixJQUFJLENBQUMsY0FBYyxDQUFDLGNBQWMsRUFBRTt3QkFDaEMsT0FBTyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7cUJBQ3ZCO29CQUVELG1CQUFPLENBQUMsNElBQWUsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDO29CQUN6QyxPQUFPLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQztnQkFFcEMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO2FBQ1o7WUFBQyxPQUFPLEdBQUcsRUFBRTtnQkFDVixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUNuQixRQUFRLENBQUM7b0JBQ0wsUUFBUSxFQUFFLEdBQUc7aUJBQ2hCLENBQUMsQ0FBQzthQUNOO1FBRUwsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBRVYsQ0FBQztJQUVELE1BQU0sQ0FBQyxVQUFVLENBQUMsa0JBQWtCLEVBQUUsUUFBUTtRQUMxQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFO1lBQzdCLHVEQUF1RDtRQUMzRCxDQUFDLENBQUMsQ0FBQztRQUNILGtCQUFrQixDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzNCLGdFQUErQixFQUFFLENBQUM7UUFDbEMsVUFBVSxDQUFDLEdBQUcsRUFBRSxHQUFHLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzVDLENBQUM7Q0FDSjtBQW5DRCw0Q0FtQ0MiLCJzb3VyY2VzIjpbIi4uLy4vc3JjL0xpdmVTZXJ2ZXJIZWxwZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgY2xhc3MgTGl2ZVNlcnZlckhlbHBlciB7XG5cbiAgICBzdGF0aWMgU3RhcnRTZXJ2ZXIocGFyYW1zLCBjYWxsYmFjaykge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgbGV0IFNlcnZlckluc3RhbmNlID0gcmVxdWlyZSgnbGl2ZS1zZXJ2ZXInKS5zdGFydChwYXJhbXMpO1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghU2VydmVySW5zdGFuY2UuX2Nvbm5lY3Rpb25LZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayh7fSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXF1aXJlKCdodHRwLXNodXRkb3duJykoU2VydmVySW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soU2VydmVySW5zdGFuY2UpO1xuXG4gICAgICAgICAgICAgICAgfSwgMTAwMCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soe1xuICAgICAgICAgICAgICAgICAgICBlcnJvck1zZzogZXJyXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSwgMCk7XG5cbiAgICB9XG5cbiAgICBzdGF0aWMgU3RvcFNlcnZlcihMaXZlU2VydmVySW5zdGFuY2UsIGNhbGxiYWNrKSB7XG4gICAgICAgIExpdmVTZXJ2ZXJJbnN0YW5jZS5zaHV0ZG93bigoKSA9PiB7XG4gICAgICAgICAgICAvLyBjYWxsYmFjaygpOyAvKm9ubHkgV29ya2luZyBmaXJzdCB0aW1lLCBVbmtub3duIEJ1ZyovXG4gICAgICAgIH0pO1xuICAgICAgICBMaXZlU2VydmVySW5zdGFuY2UuY2xvc2UoKTtcbiAgICAgICAgcmVxdWlyZSgnbGl2ZS1zZXJ2ZXInKS5zaHV0ZG93bigpO1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgY2FsbGJhY2soKTsgfSwgMTAwMCk7XG4gICAgfVxufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/LiveServerHelper.ts\n\n}");

/***/ }),

/***/ "./src/LiveShareHelper.ts":
/*!********************************!*\
  !*** ./src/LiveShareHelper.ts ***!
  \********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("{\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.LiveShareHelper = void 0;\nconst vsls = __importStar(__webpack_require__(/*! vsls/vscode */ \"./node_modules/vsls/vscode.ts\"));\n/**\n * Manages state of a live server shared via VS Live Share.\n * Caches the live server path and starts/stops sharing in response to Live Share session events.\n */\nclass LiveShareHelper {\n    constructor(appModel) {\n        this.appModel = appModel;\n        this.appModel.onDidGoLive((e) => __awaiter(this, void 0, void 0, function* () {\n            // cache the current live server browse url\n            this.livePathUri = e.pathUri;\n            yield this.shareLiveServer();\n        }));\n        this.appModel.onDidGoOffline((e) => {\n            // reset the live server cached path\n            this.livePathUri = null;\n            if (this.activeHostSession && this.sharedServer) {\n                // will un-share the server\n                this.sharedServer.dispose();\n                this.sharedServer = null;\n            }\n        });\n        this.deferredWork = vsls.getApi().then(api => {\n            if (api) { // if Live Share is available (installed)\n                this.ensureInitialized(api);\n            }\n        });\n    }\n    dispose() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.deferredWork;\n        });\n    }\n    ensureInitialized(api) {\n        this.liveshare = api;\n        if (this.liveshare.session && this.liveshare.session.role === vsls.Role.Host) {\n            this.activeHostSession = this.liveshare.session;\n        }\n        this.liveshare.onDidChangeSession((e) => __awaiter(this, void 0, void 0, function* () {\n            if (e.session.role === vsls.Role.Host) {\n                // active sharing collaboration session\n                this.activeHostSession = e.session;\n                yield this.shareLiveServer();\n            }\n            else {\n                // any other session state, including joined as a guest\n                this.activeHostSession = null;\n            }\n        }));\n    }\n    shareLiveServer() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.activeHostSession && this.livePathUri) {\n                // only share the server when we're live and VS Live Share session is active\n                this.sharedServer = yield this.liveshare.shareServer({\n                    port: this.appModel.runningPort,\n                    displayName: 'Live Server',\n                    browseUrl: `http://localhost:${this.appModel.runningPort}/${this.livePathUri.replace(/\\\\/gi, '/')}`\n                });\n            }\n        });\n    }\n}\nexports.LiveShareHelper = LiveShareHelper;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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MENBNkRDIiwic291cmNlcyI6WyIuLi8uL3NyYy9MaXZlU2hhcmVIZWxwZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgKiBhcyB2c2NvZGUgZnJvbSAndnNjb2RlJztcbmltcG9ydCAqIGFzIHZzbHMgZnJvbSAndnNscy92c2NvZGUnO1xuaW1wb3J0IHsgSUFwcE1vZGVsLCBHb0xpdmVFdmVudCwgR29PZmZsaW5lRXZlbnQgfSBmcm9tICcuL0lBcHBNb2RlbCc7XG5cbi8qKlxuICogTWFuYWdlcyBzdGF0ZSBvZiBhIGxpdmUgc2VydmVyIHNoYXJlZCB2aWEgVlMgTGl2ZSBTaGFyZS5cbiAqIENhY2hlcyB0aGUgbGl2ZSBzZXJ2ZXIgcGF0aCBhbmQgc3RhcnRzL3N0b3BzIHNoYXJpbmcgaW4gcmVzcG9uc2UgdG8gTGl2ZSBTaGFyZSBzZXNzaW9uIGV2ZW50cy5cbiAqL1xuZXhwb3J0IGNsYXNzIExpdmVTaGFyZUhlbHBlciBpbXBsZW1lbnRzIHZzY29kZS5EaXNwb3NhYmxlIHtcbiAgICBwcml2YXRlIGxpdmVzaGFyZTogdnNscy5MaXZlU2hhcmUgfCB1bmRlZmluZWQ7XG4gICAgcHJpdmF0ZSBhY3RpdmVIb3N0U2Vzc2lvbjogdnNscy5TZXNzaW9uIHwgdW5kZWZpbmVkO1xuICAgIHByaXZhdGUgbGl2ZVBhdGhVcmk6IHN0cmluZztcblxuICAgIHByaXZhdGUgZGVmZXJyZWRXb3JrOiBQcm9taXNlPHZvaWQ+O1xuICAgIHByaXZhdGUgc2hhcmVkU2VydmVyOiB2c2NvZGUuRGlzcG9zYWJsZTtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgYXBwTW9kZWw6IElBcHBNb2RlbCkge1xuICAgICAgICB0aGlzLmFwcE1vZGVsLm9uRGlkR29MaXZlKGFzeW5jIChlOiBHb0xpdmVFdmVudCkgPT4ge1xuICAgICAgICAgICAgLy8gY2FjaGUgdGhlIGN1cnJlbnQgbGl2ZSBzZXJ2ZXIgYnJvd3NlIHVybFxuICAgICAgICAgICAgdGhpcy5saXZlUGF0aFVyaSA9IGUucGF0aFVyaTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc2hhcmVMaXZlU2VydmVyKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFwcE1vZGVsLm9uRGlkR29PZmZsaW5lKChlOiBHb09mZmxpbmVFdmVudCkgPT4ge1xuICAgICAgICAgICAgLy8gcmVzZXQgdGhlIGxpdmUgc2VydmVyIGNhY2hlZCBwYXRoXG4gICAgICAgICAgICB0aGlzLmxpdmVQYXRoVXJpID0gbnVsbDtcbiAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2ZUhvc3RTZXNzaW9uICYmIHRoaXMuc2hhcmVkU2VydmVyKSB7XG4gICAgICAgICAgICAgICAgLy8gd2lsbCB1bi1zaGFyZSB0aGUgc2VydmVyXG4gICAgICAgICAgICAgICAgdGhpcy5zaGFyZWRTZXJ2ZXIuZGlzcG9zZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2hhcmVkU2VydmVyID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZGVmZXJyZWRXb3JrID0gdnNscy5nZXRBcGkoKS50aGVuKGFwaSA9PiB7XG4gICAgICAgICAgICBpZiAoYXBpKSB7IC8vIGlmIExpdmUgU2hhcmUgaXMgYXZhaWxhYmxlIChpbnN0YWxsZWQpXG4gICAgICAgICAgICAgICAgdGhpcy5lbnN1cmVJbml0aWFsaXplZChhcGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBhc3luYyBkaXNwb3NlKCkge1xuICAgICAgICBhd2FpdCB0aGlzLmRlZmVycmVkV29yaztcbiAgICB9XG5cbiAgICBwcml2YXRlIGVuc3VyZUluaXRpYWxpemVkKGFwaTogdnNscy5MaXZlU2hhcmUpIHtcbiAgICAgICAgdGhpcy5saXZlc2hhcmUgPSBhcGk7XG4gICAgICAgIGlmICh0aGlzLmxpdmVzaGFyZS5zZXNzaW9uICYmIHRoaXMubGl2ZXNoYXJlLnNlc3Npb24ucm9sZSA9PT0gdnNscy5Sb2xlLkhvc3QpIHtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlSG9zdFNlc3Npb24gPSB0aGlzLmxpdmVzaGFyZS5zZXNzaW9uO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGl2ZXNoYXJlLm9uRGlkQ2hhbmdlU2Vzc2lvbihhc3luYyAoZTogdnNscy5TZXNzaW9uQ2hhbmdlRXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChlLnNlc3Npb24ucm9sZSA9PT0gdnNscy5Sb2xlLkhvc3QpIHtcbiAgICAgICAgICAgICAgICAvLyBhY3RpdmUgc2hhcmluZyBjb2xsYWJvcmF0aW9uIHNlc3Npb25cbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZUhvc3RTZXNzaW9uID0gZS5zZXNzaW9uO1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc2hhcmVMaXZlU2VydmVyKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGFueSBvdGhlciBzZXNzaW9uIHN0YXRlLCBpbmNsdWRpbmcgam9pbmVkIGFzIGEgZ3Vlc3RcbiAgICAgICAgICAgICAgICB0aGlzLmFjdGl2ZUhvc3RTZXNzaW9uID0gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBzaGFyZUxpdmVTZXJ2ZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZUhvc3RTZXNzaW9uICYmIHRoaXMubGl2ZVBhdGhVcmkpIHtcbiAgICAgICAgICAgIC8vIG9ubHkgc2hhcmUgdGhlIHNlcnZlciB3aGVuIHdlJ3JlIGxpdmUgYW5kIFZTIExpdmUgU2hhcmUgc2Vzc2lvbiBpcyBhY3RpdmVcbiAgICAgICAgICAgIHRoaXMuc2hhcmVkU2VydmVyID0gYXdhaXQgdGhpcy5saXZlc2hhcmUuc2hhcmVTZXJ2ZXIoe1xuICAgICAgICAgICAgICAgIHBvcnQ6IHRoaXMuYXBwTW9kZWwucnVubmluZ1BvcnQsXG4gICAgICAgICAgICAgICAgZGlzcGxheU5hbWU6ICdMaXZlIFNlcnZlcicsXG4gICAgICAgICAgICAgICAgYnJvd3NlVXJsOiBgaHR0cDovL2xvY2FsaG9zdDoke3RoaXMuYXBwTW9kZWwucnVubmluZ1BvcnR9LyR7dGhpcy5saXZlUGF0aFVyaS5yZXBsYWNlKC9cXFxcL2dpLCAnLycpfWBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/LiveShareHelper.ts\n\n}");

/***/ }),

/***/ "./src/StatusbarUi.ts":
/*!****************************!*\
  !*** ./src/StatusbarUi.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StatusbarUi = void 0;\nconst vscode_1 = __webpack_require__(/*! vscode */ \"vscode\");\nconst Config_1 = __webpack_require__(/*! ./Config */ \"./src/Config.ts\");\nclass StatusbarUi {\n    static get statusbar() {\n        if (!StatusbarUi._statusBarItem) {\n            StatusbarUi._statusBarItem = vscode_1.window\n                .createStatusBarItem(vscode_1.StatusBarAlignment.Right, 100);\n            // Show status bar only if user wants :)\n            if (Config_1.Config.getShowOnStatusbar)\n                this.statusbar.show();\n        }\n        return StatusbarUi._statusBarItem;\n    }\n    static Init() {\n        StatusbarUi.Live();\n    }\n    static Working(workingMsg = 'Working on it...') {\n        StatusbarUi.statusbar.text = `$(pulse) ${workingMsg}`;\n        StatusbarUi.statusbar.tooltip = 'In case if it takes long time, try to close all browser window.';\n        StatusbarUi.statusbar.command = null;\n    }\n    static Live() {\n        StatusbarUi.statusbar.text = '$(broadcast) Go Live';\n        StatusbarUi.statusbar.command = 'extension.liveServer.goOnline';\n        StatusbarUi.statusbar.tooltip = 'Click to run live server';\n    }\n    static Offline(port) {\n        StatusbarUi.statusbar.text = `$(circle-slash) Port : ${port}`;\n        StatusbarUi.statusbar.command = 'extension.liveServer.goOffline';\n        StatusbarUi.statusbar.tooltip = 'Click to close server';\n    }\n    static dispose() {\n        StatusbarUi.statusbar.dispose();\n    }\n}\nexports.StatusbarUi = StatusbarUi;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvU3RhdHVzYmFyVWkudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkRBQW1FO0FBQ25FLHdFQUFrQztBQUNsQyxNQUFhLFdBQVc7SUFJWixNQUFNLEtBQUssU0FBUztRQUN4QixJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRTtZQUM3QixXQUFXLENBQUMsY0FBYyxHQUFHLGVBQU07aUJBQzlCLG1CQUFtQixDQUFDLDJCQUFrQixDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztZQUV4RCx3Q0FBd0M7WUFDeEMsSUFBSSxlQUFNLENBQUMsa0JBQWtCO2dCQUN6QixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO1NBQzdCO1FBRUQsT0FBTyxXQUFXLENBQUMsY0FBYyxDQUFDO0lBQ3RDLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBSTtRQUNQLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxhQUFxQixrQkFBa0I7UUFDbEQsV0FBVyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsWUFBWSxVQUFVLEVBQUUsQ0FBQztRQUN0RCxXQUFXLENBQUMsU0FBUyxDQUFDLE9BQU8sR0FBRyxpRUFBaUUsQ0FBQztRQUNsRyxXQUFXLENBQUMsU0FBUyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7SUFDekMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxJQUFJO1FBQ2QsV0FBVyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsc0JBQXNCLENBQUM7UUFDcEQsV0FBVyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUcsK0JBQStCLENBQUM7UUFDaEUsV0FBVyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUcsMEJBQTBCLENBQUM7SUFDL0QsQ0FBQztJQUVNLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBWTtRQUM5QixXQUFXLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRywwQkFBMEIsSUFBSSxFQUFFLENBQUM7UUFDOUQsV0FBVyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUcsZ0NBQWdDLENBQUM7UUFDakUsV0FBVyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUcsdUJBQXVCLENBQUM7SUFDNUQsQ0FBQztJQUVNLE1BQU0sQ0FBQyxPQUFPO1FBQ2pCLFdBQVcsQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDcEMsQ0FBQztDQUNKO0FBMUNELGtDQTBDQyIsInNvdXJjZXMiOlsiLi4vLi9zcmMvU3RhdHVzYmFyVWkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3RhdHVzQmFySXRlbSwgd2luZG93LCBTdGF0dXNCYXJBbGlnbm1lbnQgfSBmcm9tICd2c2NvZGUnO1xuaW1wb3J0IHsgQ29uZmlnIH0gZnJvbSAnLi9Db25maWcnO1xuZXhwb3J0IGNsYXNzIFN0YXR1c2JhclVpIHtcblxuICAgIHByaXZhdGUgc3RhdGljIF9zdGF0dXNCYXJJdGVtOiBTdGF0dXNCYXJJdGVtO1xuXG4gICAgcHJpdmF0ZSBzdGF0aWMgZ2V0IHN0YXR1c2JhcigpIHtcbiAgICAgICAgaWYgKCFTdGF0dXNiYXJVaS5fc3RhdHVzQmFySXRlbSkge1xuICAgICAgICAgICAgU3RhdHVzYmFyVWkuX3N0YXR1c0Jhckl0ZW0gPSB3aW5kb3dcbiAgICAgICAgICAgICAgICAuY3JlYXRlU3RhdHVzQmFySXRlbShTdGF0dXNCYXJBbGlnbm1lbnQuUmlnaHQsIDEwMCk7XG5cbiAgICAgICAgICAgIC8vIFNob3cgc3RhdHVzIGJhciBvbmx5IGlmIHVzZXIgd2FudHMgOilcbiAgICAgICAgICAgIGlmIChDb25maWcuZ2V0U2hvd09uU3RhdHVzYmFyKVxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdHVzYmFyLnNob3coKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBTdGF0dXNiYXJVaS5fc3RhdHVzQmFySXRlbTtcbiAgICB9XG5cbiAgICBzdGF0aWMgSW5pdCgpIHtcbiAgICAgICAgU3RhdHVzYmFyVWkuTGl2ZSgpO1xuICAgIH1cblxuICAgIHN0YXRpYyBXb3JraW5nKHdvcmtpbmdNc2c6IHN0cmluZyA9ICdXb3JraW5nIG9uIGl0Li4uJykge1xuICAgICAgICBTdGF0dXNiYXJVaS5zdGF0dXNiYXIudGV4dCA9IGAkKHB1bHNlKSAke3dvcmtpbmdNc2d9YDtcbiAgICAgICAgU3RhdHVzYmFyVWkuc3RhdHVzYmFyLnRvb2x0aXAgPSAnSW4gY2FzZSBpZiBpdCB0YWtlcyBsb25nIHRpbWUsIHRyeSB0byBjbG9zZSBhbGwgYnJvd3NlciB3aW5kb3cuJztcbiAgICAgICAgU3RhdHVzYmFyVWkuc3RhdHVzYmFyLmNvbW1hbmQgPSBudWxsO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgTGl2ZSgpIHtcbiAgICAgICAgU3RhdHVzYmFyVWkuc3RhdHVzYmFyLnRleHQgPSAnJChicm9hZGNhc3QpIEdvIExpdmUnO1xuICAgICAgICBTdGF0dXNiYXJVaS5zdGF0dXNiYXIuY29tbWFuZCA9ICdleHRlbnNpb24ubGl2ZVNlcnZlci5nb09ubGluZSc7XG4gICAgICAgIFN0YXR1c2JhclVpLnN0YXR1c2Jhci50b29sdGlwID0gJ0NsaWNrIHRvIHJ1biBsaXZlIHNlcnZlcic7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBPZmZsaW5lKHBvcnQ6IE51bWJlcikge1xuICAgICAgICBTdGF0dXNiYXJVaS5zdGF0dXNiYXIudGV4dCA9IGAkKGNpcmNsZS1zbGFzaCkgUG9ydCA6ICR7cG9ydH1gO1xuICAgICAgICBTdGF0dXNiYXJVaS5zdGF0dXNiYXIuY29tbWFuZCA9ICdleHRlbnNpb24ubGl2ZVNlcnZlci5nb09mZmxpbmUnO1xuICAgICAgICBTdGF0dXNiYXJVaS5zdGF0dXNiYXIudG9vbHRpcCA9ICdDbGljayB0byBjbG9zZSBzZXJ2ZXInO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZGlzcG9zZSgpIHtcbiAgICAgICAgU3RhdHVzYmFyVWkuc3RhdHVzYmFyLmRpc3Bvc2UoKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/StatusbarUi.ts\n\n}");

/***/ }),

/***/ "./src/announcement/index.ts":
/*!***********************************!*\
  !*** ./src/announcement/index.ts ***!
  \***********************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("{\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.checkNewAnnouncement = exports.SETUP_STRING = void 0;\nconst vscode_1 = __webpack_require__(/*! vscode */ \"vscode\");\nexports.SETUP_STRING = 'liveServer.setup.version';\nfunction checkNewAnnouncement(memento) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const packageJSON = vscode_1.extensions.getExtension('ritwickdey.LiveServer').packageJSON;\n        const announcement = packageJSON.announcement;\n        if (!announcement && Object.keys(announcement).length === 0)\n            return;\n        const stateVersion = (yield memento.get(exports.SETUP_STRING)) || '0.0.0';\n        const installedVersion = packageJSON.version;\n        if (stateVersion !== installedVersion && installedVersion === announcement.onVersion) {\n            yield memento.update(exports.SETUP_STRING, installedVersion);\n            const showDetails = 'Show Details';\n            const choice = yield vscode_1.window.showInformationMessage(announcement.message, showDetails);\n            if (choice === showDetails) {\n                const url = announcement.url || 'https://github.com/ritwickdey/vscode-live-server';\n                __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'opn'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()))(url);\n            }\n        }\n    });\n}\nexports.checkNewAnnouncement = checkNewAnnouncement;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYW5ub3VuY2VtZW50L2luZGV4LnRzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLDZEQUFxRDtBQUV4QyxvQkFBWSxHQUFHLDBCQUEwQixDQUFDO0FBRXZELFNBQXNCLG9CQUFvQixDQUFDLE9BQWdCOztRQUV2RCxNQUFNLFdBQVcsR0FBRyxtQkFBVSxDQUFDLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLFdBQVcsQ0FBQztRQUNqRixNQUFNLFlBQVksR0FBRyxXQUFXLENBQUMsWUFBWSxDQUFDO1FBRTlDLElBQUksQ0FBQyxZQUFZLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQztZQUFFLE9BQU87UUFFcEUsTUFBTSxZQUFZLEdBQUcsT0FBTSxPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFZLENBQUMsS0FBSSxPQUFPLENBQUM7UUFDaEUsTUFBTSxnQkFBZ0IsR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDO1FBRTdDLElBQUksWUFBWSxLQUFLLGdCQUFnQixJQUFJLGdCQUFnQixLQUFLLFlBQVksQ0FBQyxTQUFTLEVBQUU7WUFDbEYsTUFBTSxPQUFPLENBQUMsTUFBTSxDQUFDLG9CQUFZLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztZQUNyRCxNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUM7WUFDbkMsTUFBTSxNQUFNLEdBQUcsTUFBTSxlQUFNLENBQUMsc0JBQXNCLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQztZQUN0RixJQUFJLE1BQU0sS0FBSyxXQUFXLEVBQUU7Z0JBQ3hCLE1BQU0sR0FBRyxHQUFHLFlBQVksQ0FBQyxHQUFHLElBQUksa0RBQWtELENBQUM7Z0JBQ25GLG1CQUFPLENBQUMsa0lBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ3ZCO1NBRUo7SUFFTCxDQUFDO0NBQUE7QUFyQkQsb0RBcUJDIiwic291cmNlcyI6WyIuLi8uL3NyYy9hbm5vdW5jZW1lbnQvaW5kZXgudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWVtZW50bywgZXh0ZW5zaW9ucywgd2luZG93IH0gZnJvbSAndnNjb2RlJztcblxuZXhwb3J0IGNvbnN0IFNFVFVQX1NUUklORyA9ICdsaXZlU2VydmVyLnNldHVwLnZlcnNpb24nO1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gY2hlY2tOZXdBbm5vdW5jZW1lbnQobWVtZW50bzogTWVtZW50bykge1xuXG4gICAgY29uc3QgcGFja2FnZUpTT04gPSBleHRlbnNpb25zLmdldEV4dGVuc2lvbigncml0d2lja2RleS5MaXZlU2VydmVyJykucGFja2FnZUpTT047XG4gICAgY29uc3QgYW5ub3VuY2VtZW50ID0gcGFja2FnZUpTT04uYW5ub3VuY2VtZW50O1xuXG4gICAgaWYgKCFhbm5vdW5jZW1lbnQgJiYgT2JqZWN0LmtleXMoYW5ub3VuY2VtZW50KS5sZW5ndGggPT09IDApIHJldHVybjtcblxuICAgIGNvbnN0IHN0YXRlVmVyc2lvbiA9IGF3YWl0IG1lbWVudG8uZ2V0KFNFVFVQX1NUUklORykgfHwgJzAuMC4wJztcbiAgICBjb25zdCBpbnN0YWxsZWRWZXJzaW9uID0gcGFja2FnZUpTT04udmVyc2lvbjtcblxuICAgIGlmIChzdGF0ZVZlcnNpb24gIT09IGluc3RhbGxlZFZlcnNpb24gJiYgaW5zdGFsbGVkVmVyc2lvbiA9PT0gYW5ub3VuY2VtZW50Lm9uVmVyc2lvbikge1xuICAgICAgICBhd2FpdCBtZW1lbnRvLnVwZGF0ZShTRVRVUF9TVFJJTkcsIGluc3RhbGxlZFZlcnNpb24pO1xuICAgICAgICBjb25zdCBzaG93RGV0YWlscyA9ICdTaG93IERldGFpbHMnO1xuICAgICAgICBjb25zdCBjaG9pY2UgPSBhd2FpdCB3aW5kb3cuc2hvd0luZm9ybWF0aW9uTWVzc2FnZShhbm5vdW5jZW1lbnQubWVzc2FnZSwgc2hvd0RldGFpbHMpO1xuICAgICAgICBpZiAoY2hvaWNlID09PSBzaG93RGV0YWlscykge1xuICAgICAgICAgICAgY29uc3QgdXJsID0gYW5ub3VuY2VtZW50LnVybCB8fCAnaHR0cHM6Ly9naXRodWIuY29tL3JpdHdpY2tkZXkvdnNjb2RlLWxpdmUtc2VydmVyJztcbiAgICAgICAgICAgIHJlcXVpcmUoJ29wbicpKHVybCk7XG4gICAgICAgIH1cblxuICAgIH1cblxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/announcement/index.ts\n\n}");

/***/ }),

/***/ "./src/appModel.ts":
/*!*************************!*\
  !*** ./src/appModel.ts ***!
  \*************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("{\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AppModel = void 0;\nconst vscode_1 = __webpack_require__(/*! vscode */ \"vscode\");\nconst LiveServerHelper_1 = __webpack_require__(/*! ./LiveServerHelper */ \"./src/LiveServerHelper.ts\");\nconst StatusbarUi_1 = __webpack_require__(/*! ./StatusbarUi */ \"./src/StatusbarUi.ts\");\nconst Config_1 = __webpack_require__(/*! ./Config */ \"./src/Config.ts\");\nconst Helper_1 = __webpack_require__(/*! ./Helper */ \"./src/Helper.ts\");\nconst workspaceResolver_1 = __webpack_require__(/*! ./workspaceResolver */ \"./src/workspaceResolver.ts\");\nconst LiveShareHelper_1 = __webpack_require__(/*! ./LiveShareHelper */ \"./src/LiveShareHelper.ts\");\nclass AppModel {\n    constructor() {\n        this.goLiveEvent = new vscode_1.EventEmitter();\n        this.goOfflineEvent = new vscode_1.EventEmitter();\n        this.IsServerRunning = false;\n        this.runningPort = null;\n        this.liveShareHelper = new LiveShareHelper_1.LiveShareHelper(this);\n        StatusbarUi_1.StatusbarUi.Init();\n    }\n    get onDidGoLive() {\n        return this.goLiveEvent.event;\n    }\n    get onDidGoOffline() {\n        return this.goOfflineEvent.event;\n    }\n    Golive(pathUri) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // if no folder is opened.\n            if (!vscode_1.workspace.workspaceFolders) {\n                return this.showPopUpMsg(`Open a folder or workspace... (File -> Open Folder)`, true);\n            }\n            if (!vscode_1.workspace.workspaceFolders.length) {\n                return this.showPopUpMsg(`You've not added any folder in the workspace`, true);\n            }\n            const workspacePath = yield (0, workspaceResolver_1.workspaceResolver)(pathUri);\n            if (!this.isCorrectWorkspace(workspacePath))\n                return;\n            const openedDocUri = pathUri || (vscode_1.window.activeTextEditor ? vscode_1.window.activeTextEditor.document.fileName : '');\n            const pathInfos = Helper_1.Helper.testPathWithRoot(workspacePath);\n            if (this.IsServerRunning) {\n                const relativePath = Helper_1.Helper.getSubPath(pathInfos.rootPath, openedDocUri) || '';\n                this.goLiveEvent.fire({ runningPort: this.runningPort, pathUri: relativePath });\n                return this.openBrowser(this.runningPort, relativePath);\n            }\n            if (pathInfos.isNotOkay) {\n                this.showPopUpMsg('Invalid Path in liveServer.settings.root settings. live Server will serve from workspace root', true);\n            }\n            if (this.isServerBusy)\n                return;\n            let params = Helper_1.Helper.generateParams(pathInfos.rootPath, workspacePath, () => {\n                this.tagMissedCallback();\n            });\n            this.isServerBusy = true;\n            StatusbarUi_1.StatusbarUi.Working('Starting...');\n            LiveServerHelper_1.LiveServerHelper.StartServer(params, (serverInstance) => __awaiter(this, void 0, void 0, function* () {\n                this.isServerBusy = false;\n                if (serverInstance && serverInstance.address) {\n                    this.LiveServerInstance = serverInstance;\n                    this.runningPort = serverInstance.address().port;\n                    this.ToggleStatusBar();\n                    this.showPopUpMsg(`Server is Started at port : ${this.runningPort}`);\n                    if (!Config_1.Config.getNoBrowser) {\n                        const relativePath = Helper_1.Helper.getSubPath(pathInfos.rootPath, openedDocUri) || '';\n                        this.goLiveEvent.fire({ runningPort: this.runningPort, pathUri: relativePath });\n                        this.openBrowser(this.runningPort, relativePath);\n                    }\n                }\n                else {\n                    if (!serverInstance.errorMsg) {\n                        yield Config_1.Config.setPort(Config_1.Config.getPort + 1); // + 1 will be fine\n                        this.showPopUpMsg(`The default port : ${Config_1.Config.getPort - 1} is currently taken, changing port to : ${Config_1.Config.getPort}.`);\n                        this.Golive(pathUri);\n                    }\n                    else {\n                        this.showPopUpMsg(`Something went wrong! Please check into Developer Console or report on GitHub.`, true);\n                    }\n                    this.IsServerRunning = true; // to revert status - cheat :p\n                    this.ToggleStatusBar(); // reverted\n                }\n            }));\n        });\n    }\n    GoOffline() {\n        if (this.isServerBusy)\n            return;\n        if (!this.IsServerRunning) {\n            this.showPopUpMsg(`Server is not already running`);\n            return;\n        }\n        this.goOfflineEvent.fire({ runningPort: this.runningPort });\n        this.isServerBusy = true;\n        StatusbarUi_1.StatusbarUi.Working('Disposing...');\n        LiveServerHelper_1.LiveServerHelper.StopServer(this.LiveServerInstance, () => {\n            this.showPopUpMsg('Server is now offline.');\n            this.isServerBusy = false;\n            this.ToggleStatusBar();\n            this.LiveServerInstance = null;\n            this.runningPort = null;\n            this.previousWorkspacePath = null;\n        });\n    }\n    changeWorkspaceRoot() {\n        (0, workspaceResolver_1.setOrChangeWorkspace)()\n            .then(workspaceName => {\n            if (workspaceName === undefined)\n                return;\n            vscode_1.window.showInformationMessage(`Success! '${workspaceName}' workspace is now root of Live Server`);\n            // If server is running, Turn off the server.\n            if (this.IsServerRunning)\n                this.GoOffline();\n        });\n    }\n    isCorrectWorkspace(workspacePath) {\n        if (this.IsServerRunning &&\n            this.previousWorkspacePath &&\n            this.previousWorkspacePath !== workspacePath) {\n            this.showPopUpMsg(`Server is already running from different workspace.`, true);\n            return false;\n        }\n        else\n            this.previousWorkspacePath = workspacePath;\n        return true;\n    }\n    tagMissedCallback() {\n        this.showPopUpMsg('Live Reload is not possible without a head or body tag.', null, true);\n    }\n    showPopUpMsg(msg, isErrorMsg = false, isWarning = false) {\n        if (isErrorMsg) {\n            vscode_1.window.showErrorMessage(msg);\n        }\n        else if (isWarning && !Config_1.Config.getDonotVerifyTags) {\n            const donotShowMsg = 'I understand, Don\\'t show again';\n            vscode_1.window.showWarningMessage(msg, donotShowMsg)\n                .then(choice => {\n                if (choice && choice === donotShowMsg) {\n                    Config_1.Config.setDonotVerifyTags(true, true);\n                }\n            });\n        }\n        else if (!Config_1.Config.getDonotShowInfoMsg) {\n            const donotShowMsg = 'Don\\'t show again';\n            vscode_1.window.showInformationMessage(msg, donotShowMsg)\n                .then(choice => {\n                if (choice && choice === donotShowMsg) {\n                    Config_1.Config.setDonotShowInfoMsg(true, true);\n                }\n            });\n        }\n    }\n    ToggleStatusBar() {\n        if (!this.IsServerRunning) {\n            StatusbarUi_1.StatusbarUi.Offline(this.runningPort || Config_1.Config.getPort);\n        }\n        else {\n            StatusbarUi_1.StatusbarUi.Live();\n        }\n        this.IsServerRunning = !this.IsServerRunning;\n    }\n    haveAnySupportedFile() {\n        return new Promise(resolve => {\n            const globFormat = `**/*[${Helper_1.SUPPORTED_EXT.join(' | ')}]`;\n            vscode_1.workspace.findFiles(globFormat, '**/node_modules/**', 1)\n                .then((files) => __awaiter(this, void 0, void 0, function* () {\n                if (files && files.length)\n                    return resolve();\n            }));\n        });\n    }\n    openBrowser(port, path) {\n        const host = (Config_1.Config.getLocalIp ? __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'ips'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()))().local : Config_1.Config.getHost) || '127.0.0.1';\n        const protocol = Config_1.Config.getHttps.enable ? 'https' : 'http';\n        let params = [];\n        let advanceCustomBrowserCmd = Config_1.Config.getAdvancedBrowserCmdline;\n        if (path.startsWith('\\\\') || path.startsWith('/')) {\n            path = path.substring(1, path.length);\n        }\n        path = path.replace(/\\\\/gi, '/');\n        if (advanceCustomBrowserCmd) {\n            advanceCustomBrowserCmd\n                .split('--')\n                .forEach((command, index) => {\n                if (command) {\n                    if (index !== 0)\n                        command = '--' + command;\n                    params.push(command.trim());\n                }\n            });\n        }\n        else {\n            let CustomBrowser = Config_1.Config.getCustomBrowser;\n            let ChromeDebuggingAttachmentEnable = Config_1.Config.getChromeDebuggingAttachment;\n            if (CustomBrowser && CustomBrowser !== 'null' /*For backward capability*/) {\n                let browserDetails = CustomBrowser.split(':');\n                let browserName = browserDetails[0];\n                params.push(browserName);\n                if (browserDetails[1] && browserDetails[1] === 'PrivateMode') {\n                    if (browserName === 'chrome' || browserName === 'blisk')\n                        params.push('--incognito');\n                    else if (browserName === 'firefox')\n                        params.push('--private-window');\n                }\n                if ((browserName === 'chrome' || browserName === 'blisk') && ChromeDebuggingAttachmentEnable) {\n                    params.push(...[\n                        '--new-window',\n                        '--no-default-browser-check',\n                        '--remote-debugging-port=9222',\n                        '--user-data-dir=' + __dirname\n                    ]);\n                }\n            }\n        }\n        if (params[0] && params[0] === 'chrome') {\n            switch (process.platform) {\n                case 'darwin':\n                    params[0] = 'google chrome';\n                    break;\n                case 'linux':\n                    params[0] = 'google-chrome';\n                    break;\n                case 'win32':\n                    params[0] = 'chrome';\n                    break;\n                default:\n                    params[0] = 'chrome';\n            }\n        }\n        else if (params[0] && params[0].startsWith('microsoft-edge')) {\n            params[0] = `microsoft-edge:${protocol}://${host}:${port}/${path}`;\n        }\n        try {\n            __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'opn'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()))(`${protocol}://${host}:${port}/${path}`, { app: params || [''] });\n        }\n        catch (error) {\n            this.showPopUpMsg(`Server is started at ${host}:${this.runningPort} but failed to open browser. Try to change the CustomBrowser settings.`, true);\n            console.log('\\n\\nError Log to open Browser : ', error);\n            console.log('\\n\\n');\n        }\n    }\n    dispose() {\n        this.GoOffline();\n        StatusbarUi_1.StatusbarUi.dispose();\n        this.liveShareHelper.dispose();\n    }\n}\nexports.AppModel = AppModel;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/appModel.ts\n\n}");

/***/ }),

/***/ "./src/commandManager.ts":
/*!*******************************!*\
  !*** ./src/commandManager.ts ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("{\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CommandManager = void 0;\nconst vscode_1 = __webpack_require__(/*! vscode */ \"vscode\");\nclass CommandManager {\n    constructor(appModel, webviewProvider, statusBarManager) {\n        this.appModel = appModel;\n        this.webviewProvider = webviewProvider;\n        this.statusBarManager = statusBarManager;\n    }\n    static getInstance(appModel, webviewProvider, statusBarManager) {\n        if (!CommandManager.instance) {\n            CommandManager.instance = new CommandManager(appModel, webviewProvider, statusBarManager);\n        }\n        return CommandManager.instance;\n    }\n    registerCommands(context) {\n        console.log('Inline Live Server: Starting command registration process...');\n        // Array to hold all command registrations for proper disposal\n        const commandRegistrations = [];\n        try {\n            // Start Inline Live Server\n            console.log('Inline Live Server: Registering extension.liveServer.goOnline');\n            const startCommand = vscode_1.commands.registerCommand('extension.liveServer.goOnline', (fileUri) => __awaiter(this, void 0, void 0, function* () {\n                try {\n                    console.log('Inline Live Server: goOnline command executed', fileUri ? fileUri.fsPath : 'no file');\n                    yield vscode_1.workspace.saveAll();\n                    if (!this.appModel.runningPort) {\n                        this.appModel.Golive(fileUri ? fileUri.fsPath : null);\n                    }\n                    this.webviewProvider.showWebviewPanel();\n                    this.statusBarManager.updateServerState(this.statusBarManager['ServerState'].STARTING);\n                }\n                catch (error) {\n                    this.handleCommandError('start', error);\n                }\n            }));\n            commandRegistrations.push(startCommand);\n            // Stop Inline Live Server\n            console.log('Inline Live Server: Registering extension.liveServer.goOffline');\n            const stopCommand = vscode_1.commands.registerCommand('extension.liveServer.goOffline', () => __awaiter(this, void 0, void 0, function* () {\n                try {\n                    console.log('Inline Live Server: goOffline command executed');\n                    this.appModel.GoOffline();\n                    this.statusBarManager.updateServerState(this.statusBarManager['ServerState'].STOPPED);\n                    vscode_1.window.showInformationMessage('Inline Live Server stopped successfully');\n                }\n                catch (error) {\n                    this.handleCommandError('stop', error);\n                }\n            }));\n            commandRegistrations.push(stopCommand);\n            // Change Workspace\n            console.log('Inline Live Server: Registering extension.liveServer.changeWorkspace');\n            const changeWorkspaceCommand = vscode_1.commands.registerCommand('extension.liveServer.changeWorkspace', () => __awaiter(this, void 0, void 0, function* () {\n                try {\n                    console.log('Inline Live Server: changeWorkspace command executed');\n                    const workspaces = vscode_1.workspace.workspaceFolders;\n                    if (!workspaces || workspaces.length === 0) {\n                        vscode_1.window.showWarningMessage('No workspace folders available');\n                        return;\n                    }\n                    const items = workspaces.map(ws => ({\n                        label: ws.name,\n                        description: ws.uri.fsPath,\n                        detail: ws.uri.fsPath\n                    }));\n                    const selectedWorkspace = yield vscode_1.window.showQuickPick(items, {\n                        placeHolder: 'Select workspace to change to'\n                    });\n                    if (selectedWorkspace) {\n                        vscode_1.window.showInformationMessage(`Switched to workspace: ${selectedWorkspace.label}`);\n                    }\n                }\n                catch (error) {\n                    this.handleCommandError('changeWorkspace', error);\n                }\n            }));\n            commandRegistrations.push(changeWorkspaceCommand);\n            // Save Navigation State\n            console.log('Inline Live Server: Registering extension.liveServer.saveState');\n            const saveStateCommand = vscode_1.commands.registerCommand('extension.liveServer.saveState', () => __awaiter(this, void 0, void 0, function* () {\n                try {\n                    console.log('Inline Live Server: saveState command executed');\n                    if (this.webviewProvider['panel'] && this.webviewProvider['isPanelVisible']) {\n                        this.webviewProvider['panel'].webview.postMessage({\n                            command: 'saveNavigationState'\n                        });\n                        vscode_1.window.showInformationMessage('Navigation state saved');\n                    }\n                    else {\n                        vscode_1.window.showWarningMessage('Webview panel is not open');\n                    }\n                }\n                catch (error) {\n                    this.handleCommandError('saveState', error);\n                }\n            }));\n            commandRegistrations.push(saveStateCommand);\n            // Load Navigation State\n            console.log('Inline Live Server: Registering extension.liveServer.loadState');\n            const loadStateCommand = vscode_1.commands.registerCommand('extension.liveServer.loadState', () => __awaiter(this, void 0, void 0, function* () {\n                try {\n                    console.log('Inline Live Server: loadState command executed');\n                    if (this.webviewProvider['panel'] && this.webviewProvider['isPanelVisible']) {\n                        this.webviewProvider['panel'].webview.postMessage({\n                            command: 'loadNavigationState'\n                        });\n                        vscode_1.window.showInformationMessage('Navigation state loaded');\n                    }\n                    else {\n                        vscode_1.window.showWarningMessage('Webview panel is not open');\n                    }\n                }\n                catch (error) {\n                    this.handleCommandError('loadState', error);\n                }\n            }));\n            commandRegistrations.push(loadStateCommand);\n            // Start Webview (basic implementation)\n            console.log('Inline Live Server: Registering extension.liveServer.startWebview');\n            const startWebviewCommand = vscode_1.commands.registerCommand('extension.liveServer.startWebview', () => __awaiter(this, void 0, void 0, function* () {\n                try {\n                    console.log('Inline Live Server: startWebview command executed');\n                    if (!this.appModel.runningPort) {\n                        vscode_1.window.showWarningMessage('Inline Live Server server is not running. Start it first.');\n                        return;\n                    }\n                    // Show the webview panel\n                    this.webviewProvider.showWebviewPanel();\n                    vscode_1.window.showInformationMessage('Inline Live Server webview opened');\n                }\n                catch (error) {\n                    this.handleCommandError('startWebview', error);\n                }\n            }));\n            commandRegistrations.push(startWebviewCommand);\n            // Navigate Home\n            console.log('Inline Live Server: Registering extension.liveServer.navigateHome');\n            const navigateHomeCommand = vscode_1.commands.registerCommand('extension.liveServer.navigateHome', () => __awaiter(this, void 0, void 0, function* () {\n                try {\n                    console.log('Inline Live Server: navigateHome command executed');\n                    if (this.webviewProvider['panel'] && this.webviewProvider['isPanelVisible']) {\n                        this.webviewProvider['panel'].webview.postMessage({\n                            command: 'navigateHome'\n                        });\n                        vscode_1.window.showInformationMessage('Navigated to home page');\n                    }\n                    else {\n                        vscode_1.window.showWarningMessage('Webview panel is not open');\n                    }\n                }\n                catch (error) {\n                    this.handleCommandError('navigateHome', error);\n                }\n            }));\n            commandRegistrations.push(navigateHomeCommand);\n            // Zoom In\n            console.log('Inline Live Server: Registering extension.liveServer.zoomIn');\n            const zoomInCommand = vscode_1.commands.registerCommand('extension.liveServer.zoomIn', () => __awaiter(this, void 0, void 0, function* () {\n                try {\n                    console.log('Inline Live Server: zoomIn command executed');\n                    if (this.webviewProvider['panel'] && this.webviewProvider['isPanelVisible']) {\n                        this.webviewProvider['panel'].webview.postMessage({\n                            command: 'zoomIn'\n                        });\n                        vscode_1.window.showInformationMessage('Zoomed in');\n                    }\n                    else {\n                        vscode_1.window.showWarningMessage('Webview panel is not open');\n                    }\n                }\n                catch (error) {\n                    this.handleCommandError('zoomIn', error);\n                }\n            }));\n            commandRegistrations.push(zoomInCommand);\n            // Zoom Out\n            console.log('Inline Live Server: Registering extension.liveServer.zoomOut');\n            const zoomOutCommand = vscode_1.commands.registerCommand('extension.liveServer.zoomOut', () => __awaiter(this, void 0, void 0, function* () {\n                try {\n                    console.log('Inline Live Server: zoomOut command executed');\n                    if (this.webviewProvider['panel'] && this.webviewProvider['isPanelVisible']) {\n                        this.webviewProvider['panel'].webview.postMessage({\n                            command: 'zoomOut'\n                        });\n                        vscode_1.window.showInformationMessage('Zoomed out');\n                    }\n                    else {\n                        vscode_1.window.showWarningMessage('Webview panel is not open');\n                    }\n                }\n                catch (error) {\n                    this.handleCommandError('zoomOut', error);\n                }\n            }));\n            commandRegistrations.push(zoomOutCommand);\n            // Reset Zoom\n            console.log('Inline Live Server: Registering extension.liveServer.resetZoom');\n            const resetZoomCommand = vscode_1.commands.registerCommand('extension.liveServer.resetZoom', () => __awaiter(this, void 0, void 0, function* () {\n                try {\n                    console.log('Inline Live Server: resetZoom command executed');\n                    if (this.webviewProvider['panel'] && this.webviewProvider['isPanelVisible']) {\n                        this.webviewProvider['panel'].webview.postMessage({\n                            command: 'resetZoom'\n                        });\n                        vscode_1.window.showInformationMessage('Zoom reset to 100%');\n                    }\n                    else {\n                        vscode_1.window.showWarningMessage('Webview panel is not open');\n                    }\n                }\n                catch (error) {\n                    this.handleCommandError('resetZoom', error);\n                }\n            }));\n            commandRegistrations.push(resetZoomCommand);\n            // Toggle Split View\n            console.log('Inline Live Server: Registering extension.liveServer.toggleSplitView');\n            const toggleSplitViewCommand = vscode_1.commands.registerCommand('extension.liveServer.toggleSplitView', () => __awaiter(this, void 0, void 0, function* () {\n                try {\n                    console.log('Inline Live Server: toggleSplitView command executed');\n                    if (this.webviewProvider['panel'] && this.webviewProvider['isPanelVisible']) {\n                        this.webviewProvider['panel'].webview.postMessage({\n                            command: 'toggleSplitView'\n                        });\n                        vscode_1.window.showInformationMessage('Toggled split view');\n                    }\n                    else {\n                        vscode_1.window.showWarningMessage('Webview panel is not open');\n                    }\n                }\n                catch (error) {\n                    this.handleCommandError('toggleSplitView', error);\n                }\n            }));\n            commandRegistrations.push(toggleSplitViewCommand);\n            // Toggle Full Screen\n            console.log('Inline Live Server: Registering extension.liveServer.toggleFullScreen');\n            const toggleFullScreenCommand = vscode_1.commands.registerCommand('extension.liveServer.toggleFullScreen', () => __awaiter(this, void 0, void 0, function* () {\n                try {\n                    console.log('Inline Live Server: toggleFullScreen command executed');\n                    if (this.webviewProvider['panel'] && this.webviewProvider['isPanelVisible']) {\n                        this.webviewProvider['panel'].webview.postMessage({\n                            command: 'toggleFullScreen'\n                        });\n                        vscode_1.window.showInformationMessage('Toggled full screen');\n                    }\n                    else {\n                        vscode_1.window.showWarningMessage('Webview panel is not open');\n                    }\n                }\n                catch (error) {\n                    this.handleCommandError('toggleFullScreen', error);\n                }\n            }));\n            commandRegistrations.push(toggleFullScreenCommand);\n            // Open Developer Tools\n            console.log('Inline Live Server: Registering extension.liveServer.openDevTools');\n            const openDevToolsCommand = vscode_1.commands.registerCommand('extension.liveServer.openDevTools', () => __awaiter(this, void 0, void 0, function* () {\n                try {\n                    console.log('Inline Live Server: openDevTools command executed');\n                    if (this.webviewProvider['panel'] && this.webviewProvider['isPanelVisible']) {\n                        this.webviewProvider['panel'].webview.postMessage({\n                            command: 'openDevTools'\n                        });\n                        vscode_1.window.showInformationMessage('Developer tools opened');\n                    }\n                    else {\n                        vscode_1.window.showWarningMessage('Webview panel is not open');\n                    }\n                }\n                catch (error) {\n                    this.handleCommandError('openDevTools', error);\n                }\n            }));\n            commandRegistrations.push(openDevToolsCommand);\n            // Inspect Element\n            console.log('Inline Live Server: Registering extension.liveServer.inspectElement');\n            const inspectElementCommand = vscode_1.commands.registerCommand('extension.liveServer.inspectElement', () => __awaiter(this, void 0, void 0, function* () {\n                try {\n                    console.log('Inline Live Server: inspectElement command executed');\n                    if (this.webviewProvider['panel'] && this.webviewProvider['isPanelVisible']) {\n                        this.webviewProvider['panel'].webview.postMessage({\n                            command: 'inspectElement'\n                        });\n                        vscode_1.window.showInformationMessage('Element inspection enabled');\n                    }\n                    else {\n                        vscode_1.window.showWarningMessage('Webview panel is not open');\n                    }\n                }\n                catch (error) {\n                    this.handleCommandError('inspectElement', error);\n                }\n            }));\n            commandRegistrations.push(inspectElementCommand);\n            // View Source\n            console.log('Inline Live Server: Registering extension.liveServer.viewSource');\n            const viewSourceCommand = vscode_1.commands.registerCommand('extension.liveServer.viewSource', () => __awaiter(this, void 0, void 0, function* () {\n                try {\n                    console.log('Inline Live Server: viewSource command executed');\n                    if (this.webviewProvider['panel'] && this.webviewProvider['isPanelVisible']) {\n                        this.webviewProvider['panel'].webview.postMessage({\n                            command: 'viewSource'\n                        });\n                        vscode_1.window.showInformationMessage('Source view opened');\n                    }\n                    else {\n                        vscode_1.window.showWarningMessage('Webview panel is not open');\n                    }\n                }\n                catch (error) {\n                    this.handleCommandError('viewSource', error);\n                }\n            }));\n            commandRegistrations.push(viewSourceCommand);\n            // Clear Navigation History\n            console.log('Inline Live Server: Registering extension.liveServer.clearHistory');\n            const clearHistoryCommand = vscode_1.commands.registerCommand('extension.liveServer.clearHistory', () => __awaiter(this, void 0, void 0, function* () {\n                try {\n                    console.log('Inline Live Server: clearHistory command executed');\n                    if (this.webviewProvider['panel'] && this.webviewProvider['isPanelVisible']) {\n                        this.webviewProvider['panel'].webview.postMessage({\n                            command: 'clearHistory'\n                        });\n                        vscode_1.window.showInformationMessage('Navigation history cleared');\n                    }\n                    else {\n                        vscode_1.window.showWarningMessage('Webview panel is not open');\n                    }\n                }\n                catch (error) {\n                    this.handleCommandError('clearHistory', error);\n                }\n            }));\n            commandRegistrations.push(clearHistoryCommand);\n            // Register all commands with context\n            context.subscriptions.push(...commandRegistrations);\n            console.log(`Inline Live Server: Successfully registered ${commandRegistrations.length} commands`);\n        }\n        catch (error) {\n            console.error('Inline Live Server: Error during command registration:', error);\n            this.handleCommandError('commandRegistration', error);\n        }\n    }\n    handleCommandError(commandName, error) {\n        const message = `Inline Live Server command '${commandName}' failed: ${error.message}`;\n        vscode_1.window.showErrorMessage(message);\n        console.error(`Inline Live Server ${commandName} error:`, error);\n    }\n    updateCommandStates() {\n        // Update command enablement based on server state\n        const isRunning = this.appModel.runningPort !== null;\n        // Note: In VS Code, command enablement is typically handled through\n        // package.json \"when\" clauses or programmatically through menus API\n        // For now, we'll handle this through user feedback in the commands themselves\n    }\n}\nexports.CommandManager = CommandManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/commandManager.ts\n\n}");

/***/ }),

/***/ "./src/extension.ts":
/*!**************************!*\
  !*** ./src/extension.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.deactivate = exports.activate = void 0;\nconst appModel_1 = __webpack_require__(/*! ./appModel */ \"./src/appModel.ts\");\nconst webviewPanelProvider_1 = __webpack_require__(/*! ./webviewPanelProvider */ \"./src/webviewPanelProvider.ts\");\nconst statusBarManager_1 = __webpack_require__(/*! ./statusBarManager */ \"./src/statusBarManager.ts\");\nconst commandManager_1 = __webpack_require__(/*! ./commandManager */ \"./src/commandManager.ts\");\nconst announcement_1 = __webpack_require__(/*! ./announcement */ \"./src/announcement/index.ts\");\nfunction activate(context) {\n    const appModel = new appModel_1.AppModel();\n    const webviewProvider = webviewPanelProvider_1.WebviewPanelProvider.getInstance(context, appModel);\n    // Initialize enhanced status bar manager\n    const statusBarManager = statusBarManager_1.StatusBarManager.getInstance(appModel, webviewProvider);\n    // Initialize command manager\n    const commandManager = commandManager_1.CommandManager.getInstance(appModel, webviewProvider, statusBarManager);\n    // Register all new commands\n    commandManager.registerCommands(context);\n    // Create enhanced status bar item for Inline Live Server\n    const statusBarItem = statusBarManager.getStatusBarItem();\n    Promise.resolve().then(() => {\n        context.globalState.setKeysForSync([announcement_1.SETUP_STRING]);\n        (0, announcement_1.checkNewAnnouncement)(context.globalState);\n    });\n    context.subscriptions.push(appModel);\n    context.subscriptions.push(webviewProvider);\n    context.subscriptions.push(statusBarManager);\n    // Show status bar item by default\n    statusBarManager.show();\n}\nexports.activate = activate;\nfunction deactivate() {\n}\nexports.deactivate = deactivate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZXh0ZW5zaW9uLnRzIiwibWFwcGluZ3MiOiJBQUFhOzs7QUFJYiw4RUFBc0M7QUFDdEMsa0hBQThEO0FBQzlELHNHQUFzRDtBQUN0RCxnR0FBa0Q7QUFDbEQsZ0dBQW9FO0FBRXBFLFNBQWdCLFFBQVEsQ0FBQyxPQUF5QjtJQUM5QyxNQUFNLFFBQVEsR0FBRyxJQUFJLG1CQUFRLEVBQUUsQ0FBQztJQUNoQyxNQUFNLGVBQWUsR0FBRywyQ0FBb0IsQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBRTVFLHlDQUF5QztJQUN6QyxNQUFNLGdCQUFnQixHQUFHLG1DQUFnQixDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsZUFBZSxDQUFDLENBQUM7SUFFakYsNkJBQTZCO0lBQzdCLE1BQU0sY0FBYyxHQUFHLCtCQUFjLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztJQUUvRiw0QkFBNEI7SUFDNUIsY0FBYyxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBRXpDLHVEQUF1RDtJQUN2RCxNQUFNLGFBQWEsR0FBRyxnQkFBZ0IsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO0lBRTFELE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO1FBQ3hCLE9BQU8sQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUMsMkJBQVksQ0FBQyxDQUFDLENBQUM7UUFDbkQsdUNBQW9CLEVBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQzlDLENBQUMsQ0FBQyxDQUFDO0lBWUgsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDckMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDNUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUU3QyxrQ0FBa0M7SUFDbEMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDNUIsQ0FBQztBQXJDRCw0QkFxQ0M7QUFHRCxTQUFnQixVQUFVO0FBRTFCLENBQUM7QUFGRCxnQ0FFQyIsInNvdXJjZXMiOlsiLi4vLi9zcmMvZXh0ZW5zaW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHsgRXh0ZW5zaW9uQ29udGV4dCwgd29ya3NwYWNlLCBjb21tYW5kcywgd2luZG93LCBTdGF0dXNCYXJJdGVtLCBTdGF0dXNCYXJBbGlnbm1lbnQgfSBmcm9tICd2c2NvZGUnO1xuaW1wb3J0ICogYXMgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCB7IEFwcE1vZGVsIH0gZnJvbSAnLi9hcHBNb2RlbCc7XG5pbXBvcnQgeyBXZWJ2aWV3UGFuZWxQcm92aWRlciB9IGZyb20gJy4vd2Vidmlld1BhbmVsUHJvdmlkZXInO1xuaW1wb3J0IHsgU3RhdHVzQmFyTWFuYWdlciB9IGZyb20gJy4vc3RhdHVzQmFyTWFuYWdlcic7XG5pbXBvcnQgeyBDb21tYW5kTWFuYWdlciB9IGZyb20gJy4vY29tbWFuZE1hbmFnZXInO1xuaW1wb3J0IHsgY2hlY2tOZXdBbm5vdW5jZW1lbnQsIFNFVFVQX1NUUklORyB9IGZyb20gJy4vYW5ub3VuY2VtZW50JztcblxuZXhwb3J0IGZ1bmN0aW9uIGFjdGl2YXRlKGNvbnRleHQ6IEV4dGVuc2lvbkNvbnRleHQpIHtcbiAgICBjb25zdCBhcHBNb2RlbCA9IG5ldyBBcHBNb2RlbCgpO1xuICAgIGNvbnN0IHdlYnZpZXdQcm92aWRlciA9IFdlYnZpZXdQYW5lbFByb3ZpZGVyLmdldEluc3RhbmNlKGNvbnRleHQsIGFwcE1vZGVsKTtcblxuICAgIC8vIEluaXRpYWxpemUgZW5oYW5jZWQgc3RhdHVzIGJhciBtYW5hZ2VyXG4gICAgY29uc3Qgc3RhdHVzQmFyTWFuYWdlciA9IFN0YXR1c0Jhck1hbmFnZXIuZ2V0SW5zdGFuY2UoYXBwTW9kZWwsIHdlYnZpZXdQcm92aWRlcik7XG5cbiAgICAvLyBJbml0aWFsaXplIGNvbW1hbmQgbWFuYWdlclxuICAgIGNvbnN0IGNvbW1hbmRNYW5hZ2VyID0gQ29tbWFuZE1hbmFnZXIuZ2V0SW5zdGFuY2UoYXBwTW9kZWwsIHdlYnZpZXdQcm92aWRlciwgc3RhdHVzQmFyTWFuYWdlcik7XG5cbiAgICAvLyBSZWdpc3RlciBhbGwgbmV3IGNvbW1hbmRzXG4gICAgY29tbWFuZE1hbmFnZXIucmVnaXN0ZXJDb21tYW5kcyhjb250ZXh0KTtcblxuICAgIC8vIENyZWF0ZSBlbmhhbmNlZCBzdGF0dXMgYmFyIGl0ZW0gZm9yIFRCWCBMaXZlIFByZXZpZXdcbiAgICBjb25zdCBzdGF0dXNCYXJJdGVtID0gc3RhdHVzQmFyTWFuYWdlci5nZXRTdGF0dXNCYXJJdGVtKCk7XG5cbiAgICBQcm9taXNlLnJlc29sdmUoKS50aGVuKCgpID0+IHtcbiAgICAgICAgY29udGV4dC5nbG9iYWxTdGF0ZS5zZXRLZXlzRm9yU3luYyhbU0VUVVBfU1RSSU5HXSk7XG4gICAgICAgIGNoZWNrTmV3QW5ub3VuY2VtZW50KGNvbnRleHQuZ2xvYmFsU3RhdGUpO1xuICAgIH0pO1xuXG5cbiAgICBcblxuICAgIFxuXG4gICAgXG5cbiAgICBcblxuXG4gICAgY29udGV4dC5zdWJzY3JpcHRpb25zLnB1c2goYXBwTW9kZWwpO1xuICAgIGNvbnRleHQuc3Vic2NyaXB0aW9ucy5wdXNoKHdlYnZpZXdQcm92aWRlcik7XG4gICAgY29udGV4dC5zdWJzY3JpcHRpb25zLnB1c2goc3RhdHVzQmFyTWFuYWdlcik7XG5cbiAgICAvLyBTaG93IHN0YXR1cyBiYXIgaXRlbSBieSBkZWZhdWx0XG4gICAgc3RhdHVzQmFyTWFuYWdlci5zaG93KCk7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGRlYWN0aXZhdGUoKSB7XG5cbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/extension.ts\n\n}");

/***/ }),

/***/ "./src/statusBarManager.ts":
/*!*********************************!*\
  !*** ./src/statusBarManager.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.StatusBarManager = exports.ServerState = void 0;\nconst vscode_1 = __webpack_require__(/*! vscode */ \"vscode\");\nvar ServerState;\n(function (ServerState) {\n    ServerState[\"STOPPED\"] = \"stopped\";\n    ServerState[\"STARTING\"] = \"starting\";\n    ServerState[\"RUNNING\"] = \"running\";\n    ServerState[\"ERROR\"] = \"error\";\n})(ServerState = exports.ServerState || (exports.ServerState = {}));\nclass StatusBarManager {\n    constructor(appModel, webviewProvider) {\n        this.appModel = appModel;\n        this.webviewProvider = webviewProvider;\n        this.initializeStatusBar();\n        this.initializeState();\n    }\n    static getInstance(appModel, webviewProvider) {\n        if (!StatusBarManager.instance) {\n            StatusBarManager.instance = new StatusBarManager(appModel, webviewProvider);\n        }\n        return StatusBarManager.instance;\n    }\n    initializeStatusBar() {\n        this.statusBarItem = vscode_1.window.createStatusBarItem(vscode_1.StatusBarAlignment.Left, 100);\n        this.statusBarItem.command = 'inlineLivePreview.start';\n        // Add context menu to status bar item\n        this.statusBarItem.tooltip = this.getTooltipContent();\n        this.statusBarItem.show();\n    }\n    initializeState() {\n        this.currentState = {\n            serverState: ServerState.STOPPED,\n            isConnected: false\n        };\n        this.updateStatusBar();\n    }\n    updateServerState(state, port) {\n        this.currentState.serverState = state;\n        if (port !== undefined) {\n            this.currentState.port = port;\n        }\n        // Update connection status based on server state\n        this.currentState.isConnected = state === ServerState.RUNNING;\n        this.updateStatusBar();\n    }\n    updateConnectionStatus(isConnected) {\n        this.currentState.isConnected = isConnected;\n        this.updateStatusBar();\n    }\n    updateWorkspaceInfo(workspaceName) {\n        this.currentState.workspaceName = workspaceName;\n        this.updateStatusBar();\n    }\n    updateStatusBar() {\n        const { serverState, port, isConnected, workspaceName } = this.currentState;\n        // Update text based on server state\n        switch (serverState) {\n            case ServerState.STOPPED:\n                this.statusBarItem.text = '$(circle-slash) Inline Live Server';\n                this.statusBarItem.command = 'inlineLivePreview.start';\n                break;\n            case ServerState.STARTING:\n                this.statusBarItem.text = '$(pulse) Inline Live Server';\n                this.statusBarItem.command = 'inlineLivePreview.stop';\n                break;\n            case ServerState.RUNNING:\n                const portText = port ? `:${port}` : '';\n                const connectionIcon = isConnected ? '$(check)' : '$(warning)';\n                this.statusBarItem.text = `${connectionIcon} Inline Live Server${portText}`;\n                this.statusBarItem.command = 'inlineLivePreview.stop';\n                break;\n            case ServerState.ERROR:\n                this.statusBarItem.text = '$(error) Inline Live Server';\n                this.statusBarItem.command = 'inlineLivePreview.start';\n                break;\n        }\n        // Update tooltip with current state and actions\n        this.statusBarItem.tooltip = this.getTooltipContent();\n        // Update color based on state\n        this.updateStatusBarColor();\n    }\n    getTooltipContent() {\n        const { serverState, port, isConnected, workspaceName } = this.currentState;\n        let tooltip = 'Inline Live Server\\n\\n';\n        // Add current status\n        switch (serverState) {\n            case ServerState.STOPPED:\n                tooltip += 'Status: Stopped\\n';\n                tooltip += 'Click to start server';\n                break;\n            case ServerState.STARTING:\n                tooltip += 'Status: Starting...\\n';\n                tooltip += 'Click to stop server';\n                break;\n            case ServerState.RUNNING:\n                tooltip += `Status: Running on port ${port || 'unknown'}\\n`;\n                tooltip += `Connection: ${isConnected ? 'Connected' : 'Disconnected'}\\n`;\n                if (workspaceName) {\n                    tooltip += `Workspace: ${workspaceName}\\n`;\n                }\n                tooltip += 'Click to stop server';\n                break;\n            case ServerState.ERROR:\n                tooltip += 'Status: Error\\n';\n                tooltip += 'Click to restart server';\n                break;\n        }\n        // Add quick actions\n        tooltip += '\\nQuick Actions:\\n';\n        tooltip += '• Ctrl+Click: Open in external browser\\n';\n        tooltip += '• Right-click: Show context menu\\n';\n        tooltip += '• Alt+Click: Open settings';\n        return tooltip;\n    }\n    updateStatusBarColor() {\n        // Reset color first\n        this.statusBarItem.color = undefined;\n        switch (this.currentState.serverState) {\n            case ServerState.RUNNING:\n                if (!this.currentState.isConnected) {\n                    this.statusBarItem.color = '#FFA500'; // Orange for disconnected\n                }\n                break;\n            case ServerState.ERROR:\n                this.statusBarItem.color = '#FF4444'; // Red for error\n                break;\n            case ServerState.STARTING:\n                this.statusBarItem.color = '#4444FF'; // Blue for starting\n                break;\n        }\n    }\n    show() {\n        this.statusBarItem.show();\n    }\n    hide() {\n        this.statusBarItem.hide();\n    }\n    dispose() {\n        if (this.statusBarItem) {\n            this.statusBarItem.dispose();\n        }\n    }\n    getStatusBarItem() {\n        return this.statusBarItem;\n    }\n}\nexports.StatusBarManager = StatusBarManager;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/statusBarManager.ts\n\n}");

/***/ }),

/***/ "./src/webviewPanelProvider.ts":
/*!*************************************!*\
  !*** ./src/webviewPanelProvider.ts ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WebviewPanelProvider = void 0;\nconst vscode_1 = __webpack_require__(/*! vscode */ \"vscode\");\nconst Config_1 = __webpack_require__(/*! ./Config */ \"./src/Config.ts\");\nclass WebviewPanelProvider {\n    constructor(context, appModel) {\n        this.disposables = [];\n        this.isPanelVisible = false;\n        this.appModel = appModel;\n        this.setupMessageHandlers();\n    }\n    static getInstance(context, appModel) {\n        if (!WebviewPanelProvider.instance) {\n            WebviewPanelProvider.instance = new WebviewPanelProvider(context, appModel);\n        }\n        return WebviewPanelProvider.instance;\n    }\n    showWebviewPanel() {\n        const column = vscode_1.window.activeTextEditor\n            ? vscode_1.window.activeTextEditor.viewColumn\n            : vscode_1.ViewColumn.One;\n        if (this.panel) {\n            this.panel.reveal(column);\n            this.isPanelVisible = true;\n        }\n        else {\n            this.createWebviewPanel(column);\n        }\n    }\n    createWebviewPanel(column) {\n        var _a, _b;\n        this.panel = vscode_1.window.createWebviewPanel('tbxLivePreview', 'Inline Live Server', column, {\n            enableScripts: true,\n            localResourceRoots: [\n                vscode_1.Uri.joinPath(((_b = (_a = vscode_1.workspace.workspaceFolders) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.uri) || vscode_1.Uri.file(''), 'media'),\n                vscode_1.Uri.joinPath(vscode_1.Uri.file(__dirname), '..', 'media')\n            ],\n            retainContextWhenHidden: true\n        });\n        this.panel.webview.html = this.getWebviewContent();\n        this.panel.webview.onDidReceiveMessage(message => this.handleMessage(message), null, this.disposables);\n        this.panel.onDidDispose(() => this.dispose(), null, this.disposables);\n        this.panel.onDidChangeViewState((e) => {\n            this.isPanelVisible = e.webviewPanel.visible;\n        }, null, this.disposables);\n        this.isPanelVisible = true;\n    }\n    getWebviewContent() {\n        var _a;\n        const nonce = this.getNonce();\n        const cspSource = (_a = this.panel) === null || _a === void 0 ? void 0 : _a.webview.cspSource;\n        return `<!DOCTYPE html>\n        <html lang=\"en\">\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <meta http-equiv=\"Content-Security-Policy\" content=\"default-src 'none';\n                style-src 'unsafe-inline' ${cspSource};\n                script-src 'nonce-${nonce}';\n                frame-src ${cspSource} http: https:;\n                img-src ${cspSource} https: data:;\n                connect-src ${cspSource} ws: wss:;\">\n            <title>Inline Live Server</title>\n            <style>\n                body {\n                    margin: 0;\n                    padding: 0;\n                    height: 100vh;\n                    font-family: var(--vscode-font-family);\n                    font-size: var(--vscode-font-size);\n                    background-color: var(--vscode-editor-background);\n                    color: var(--vscode-editor-foreground);\n                }\n\n                .container {\n                    display: flex;\n                    flex-direction: column;\n                    height: 100vh;\n                }\n\n                .header {\n                    display: flex;\n                    align-items: center;\n                    padding: 8px 16px;\n                    background-color: var(--vscode-editorWidget-background);\n                    border-bottom: 1px solid var(--vscode-panel-border);\n                    min-height: 40px;\n                }\n\n                .address-bar {\n                    flex: 1;\n                    margin: 0 12px;\n                    padding: 4px 8px;\n                    background-color: var(--vscode-input-background);\n                    color: var(--vscode-input-foreground);\n                    border: 1px solid var(--vscode-input-border);\n                    border-radius: 3px;\n                    font-family: var(--vscode-editor-font-family);\n                    font-size: 13px;\n                }\n\n                .status {\n                    font-size: 12px;\n                    color: var(--vscode-descriptionForeground);\n                    margin-left: 12px;\n                }\n\n                .loading {\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                    height: 100%;\n                    font-size: 14px;\n                    color: var(--vscode-descriptionForeground);\n                }\n\n                .error {\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                    height: 100%;\n                    font-size: 14px;\n                    color: var(--vscode-errorForeground);\n                    background-color: var(--vscode-editor-background);\n                }\n\n                .iframe-container {\n                    flex: 1;\n                    position: relative;\n                }\n\n                iframe {\n                    width: 100%;\n                    height: 100%;\n                    border: none;\n                    background-color: var(--vscode-editor-background);\n                }\n\n                .hidden {\n                    display: none !important;\n                }\n\n                .refresh-btn {\n                    background-color: var(--vscode-button-background);\n                    color: var(--vscode-button-foreground);\n                    border: none;\n                    padding: 4px 8px;\n                    border-radius: 3px;\n                    cursor: pointer;\n                    font-size: 12px;\n                    margin-right: 8px;\n                }\n\n                .refresh-btn:hover {\n                    background-color: var(--vscode-button-hoverBackground);\n                }\n            </style>\n        </head>\n        <body>\n            <div class=\"container\">\n                <div class=\"header\">\n                    <button class=\"refresh-btn\" id=\"refreshBtn\">↻ Refresh</button>\n                    <input type=\"text\" class=\"address-bar\" id=\"addressBar\" readonly>\n                    <div class=\"status\" id=\"status\">Ready</div>\n                </div>\n                <div class=\"iframe-container\">\n                    <div class=\"loading\" id=\"loading\">\n                        <div>Loading preview...</div>\n                    </div>\n                    <div class=\"error hidden\" id=\"error\">\n                        <div>Failed to load preview</div>\n                    </div>\n                    <iframe id=\"previewFrame\" class=\"hidden\" sandbox=\"allow-scripts allow-same-origin allow-forms allow-modals allow-popups\"></iframe>\n                </div>\n            </div>\n\n            <script nonce=\"${nonce}\">\n                const vscode = acquireVsCodeApi();\n                const refreshBtn = document.getElementById('refreshBtn');\n                const addressBar = document.getElementById('addressBar');\n                const status = document.getElementById('status');\n                const loading = document.getElementById('loading');\n                const error = document.getElementById('error');\n                const previewFrame = document.getElementById('previewFrame');\n\n                let currentUrl = '';\n\n                refreshBtn.addEventListener('click', () => {\n                    if (currentUrl) {\n                        loadPreview(currentUrl);\n                    }\n                });\n\n                function updateStatus(message, isError = false) {\n                    status.textContent = message;\n                    status.style.color = isError ? 'var(--vscode-errorForeground)' : 'var(--vscode-descriptionForeground)';\n                }\n\n                function showLoading() {\n                    loading.classList.remove('hidden');\n                    error.classList.add('hidden');\n                    previewFrame.classList.add('hidden');\n                }\n\n                function showError(message) {\n                    loading.classList.add('hidden');\n                    error.classList.remove('hidden');\n                    previewFrame.classList.add('hidden');\n                    error.querySelector('div').textContent = message;\n                    updateStatus('Error', true);\n                }\n\n                function showPreview() {\n                    loading.classList.add('hidden');\n                    error.classList.add('hidden');\n                    previewFrame.classList.remove('hidden');\n                    updateStatus('Live');\n                }\n\n                function loadPreview(url) {\n                    if (!url) {\n                        showError('No URL provided');\n                        return;\n                    }\n\n                    currentUrl = url;\n                    addressBar.value = url;\n                    showLoading();\n                    updateStatus('Loading...');\n\n                    try {\n                        previewFrame.src = url;\n                        previewFrame.onload = () => {\n                            showPreview();\n                        };\n                        previewFrame.onerror = () => {\n                            showError('Failed to load preview');\n                        };\n                    } catch (err) {\n                        showError('Invalid URL format');\n                    }\n                }\n\n                // Handle messages from extension\n                window.addEventListener('message', event => {\n                    const message = event.data;\n                    switch (message.command) {\n                        case 'loadPreview':\n                            loadPreview(message.url);\n                            break;\n                        case 'updateStatus':\n                            updateStatus(message.text, message.isError);\n                            break;\n                        case 'showError':\n                            showError(message.text);\n                            break;\n                    }\n                });\n\n                // Notify extension that webview is ready\n                vscode.postMessage({\n                    command: 'webviewReady'\n                });\n            </script>\n        </body>\n        </html>`;\n    }\n    updatePreview(serverInfo) {\n        if (!this.panel || !this.isPanelVisible) {\n            return;\n        }\n        const url = `${serverInfo.protocol}://${serverInfo.host}:${serverInfo.port}/${serverInfo.path}`;\n        this.panel.webview.postMessage({\n            command: 'loadPreview',\n            url: url\n        });\n    }\n    updateStatus(message, isError = false) {\n        if (!this.panel || !this.isPanelVisible) {\n            return;\n        }\n        this.panel.webview.postMessage({\n            command: 'updateStatus',\n            text: message,\n            isError: isError\n        });\n    }\n    showError(message) {\n        if (!this.panel || !this.isPanelVisible) {\n            return;\n        }\n        this.panel.webview.postMessage({\n            command: 'showError',\n            text: message\n        });\n    }\n    handleMessage(message) {\n        switch (message.command) {\n            case 'webviewReady':\n                // Webview is ready, we can start sending updates\n                break;\n            default:\n                console.log('Unknown message:', message);\n        }\n    }\n    setupMessageHandlers() {\n        // Listen to server events from AppModel\n        this.appModel.onDidGoLive((event) => {\n            if (this.panel && this.isPanelVisible) {\n                const host = (Config_1.Config.getLocalIp ? __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module 'ips'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()))().local : Config_1.Config.getHost) || '127.0.0.1';\n                const protocol = Config_1.Config.getHttps.enable ? 'https' : 'http';\n                this.updatePreview({\n                    port: event.runningPort,\n                    host: host,\n                    protocol: protocol,\n                    path: event.pathUri || ''\n                });\n            }\n        });\n        this.appModel.onDidGoOffline(() => {\n            if (this.panel && this.isPanelVisible) {\n                this.updateStatus('Server stopped', true);\n            }\n        });\n    }\n    getNonce() {\n        let text = '';\n        const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        for (let i = 0; i < 32; i++) {\n            text += possible.charAt(Math.floor(Math.random() * possible.length));\n        }\n        return text;\n    }\n    dispose() {\n        if (this.panel) {\n            this.panel.dispose();\n            this.panel = undefined;\n        }\n        while (this.disposables.length) {\n            const disposable = this.disposables.pop();\n            if (disposable) {\n                disposable.dispose();\n            }\n        }\n        this.isPanelVisible = false;\n        WebviewPanelProvider.instance = null;\n    }\n}\nexports.WebviewPanelProvider = WebviewPanelProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/webviewPanelProvider.ts\n\n}");

/***/ }),

/***/ "./src/workspaceResolver.ts":
/*!**********************************!*\
  !*** ./src/workspaceResolver.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("{\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.workspaceResolver = exports.setOrChangeWorkspace = void 0;\nconst vscode_1 = __webpack_require__(/*! vscode */ \"vscode\");\nconst Config_1 = __webpack_require__(/*! ./Config */ \"./src/Config.ts\");\nfunction setOrChangeWorkspace() {\n    const { workspaceFolders } = vscode_1.workspace;\n    const workspaceNames = workspaceFolders.map(e => e.name);\n    return vscode_1.window.showQuickPick(workspaceNames, {\n        placeHolder: 'choose workspace for Live Server',\n        ignoreFocusOut: true\n    }).then(workspaceName => {\n        if (workspaceName) {\n            return Config_1.Config.setMultiRootWorkspaceName(workspaceName).then(() => workspaceName);\n        }\n    });\n}\nexports.setOrChangeWorkspace = setOrChangeWorkspace;\nfunction workspaceResolver(fileUri) {\n    return new Promise(resolve => {\n        const { workspaceFolders } = vscode_1.workspace;\n        const workspaceNames = workspaceFolders.map(e => e.name);\n        // If only one workspace. No need to check anything.\n        if (workspaceNames.length === 1) {\n            return resolve(workspaceFolders[0].uri.fsPath);\n        }\n        // if fileUri is set. Means, user tried to open server by right clicking to a HTML file.\n        if (fileUri) {\n            const selectedWorkspace = workspaceFolders.find(ws => fileUri.startsWith(ws.uri.fsPath));\n            if (selectedWorkspace) {\n                return Config_1.Config.setMultiRootWorkspaceName(selectedWorkspace.name)\n                    .then(() => resolve(selectedWorkspace.uri.fsPath));\n            }\n        }\n        // If workspace already set by User\n        if (Config_1.Config.getMultiRootWorkspaceName) {\n            // A small test that the WorkspaceName (set by user) is valid\n            const targetWorkspace = workspaceFolders.find(e => e.name === Config_1.Config.getMultiRootWorkspaceName);\n            if (targetWorkspace)\n                return resolve(targetWorkspace.uri.fsPath);\n            // reset whatever user is set.\n            Config_1.Config.setMultiRootWorkspaceName(null);\n        }\n        // Show a quick picker\n        setOrChangeWorkspace()\n            .then(workspaceName => {\n            const workspaceUri = workspaceFolders.find(e => e.name === workspaceName).uri.fsPath;\n            return resolve(workspaceUri);\n        });\n    });\n}\nexports.workspaceResolver = workspaceResolver;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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ZXNvbHZlci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB3b3Jrc3BhY2UsIHdpbmRvdyB9IGZyb20gJ3ZzY29kZSc7XG5pbXBvcnQgeyBDb25maWcgfSBmcm9tICcuL0NvbmZpZyc7XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRPckNoYW5nZVdvcmtzcGFjZSgpIHtcbiAgICBjb25zdCB7IHdvcmtzcGFjZUZvbGRlcnMgfSA9IHdvcmtzcGFjZTtcbiAgICBjb25zdCB3b3Jrc3BhY2VOYW1lcyA9IHdvcmtzcGFjZUZvbGRlcnMubWFwKGUgPT4gZS5uYW1lKTtcblxuICAgIHJldHVybiB3aW5kb3cuc2hvd1F1aWNrUGljayh3b3Jrc3BhY2VOYW1lcywge1xuICAgICAgICBwbGFjZUhvbGRlcjogJ2Nob29zZSB3b3Jrc3BhY2UgZm9yIExpdmUgU2VydmVyJyxcbiAgICAgICAgaWdub3JlRm9jdXNPdXQ6IHRydWVcbiAgICB9KS50aGVuKHdvcmtzcGFjZU5hbWUgPT4ge1xuICAgICAgICBpZiAod29ya3NwYWNlTmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuIENvbmZpZy5zZXRNdWx0aVJvb3RXb3Jrc3BhY2VOYW1lKHdvcmtzcGFjZU5hbWUpLnRoZW4oKCkgPT4gd29ya3NwYWNlTmFtZSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gd29ya3NwYWNlUmVzb2x2ZXIoZmlsZVVyaT86IHN0cmluZykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZTxzdHJpbmc+KHJlc29sdmUgPT4ge1xuICAgICAgICBjb25zdCB7IHdvcmtzcGFjZUZvbGRlcnMgfSA9IHdvcmtzcGFjZTtcbiAgICAgICAgY29uc3Qgd29ya3NwYWNlTmFtZXMgPSB3b3Jrc3BhY2VGb2xkZXJzLm1hcChlID0+IGUubmFtZSk7XG5cbiAgICAgICAgLy8gSWYgb25seSBvbmUgd29ya3NwYWNlLiBObyBuZWVkIHRvIGNoZWNrIGFueXRoaW5nLlxuICAgICAgICBpZiAod29ya3NwYWNlTmFtZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzb2x2ZSh3b3Jrc3BhY2VGb2xkZXJzWzBdLnVyaS5mc1BhdGgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgZmlsZVVyaSBpcyBzZXQuIE1lYW5zLCB1c2VyIHRyaWVkIHRvIG9wZW4gc2VydmVyIGJ5IHJpZ2h0IGNsaWNraW5nIHRvIGEgSFRNTCBmaWxlLlxuICAgICAgICBpZiAoZmlsZVVyaSkge1xuICAgICAgICAgICAgY29uc3Qgc2VsZWN0ZWRXb3Jrc3BhY2UgPSB3b3Jrc3BhY2VGb2xkZXJzLmZpbmQod3MgPT4gZmlsZVVyaS5zdGFydHNXaXRoKHdzLnVyaS5mc1BhdGgpKTtcbiAgICAgICAgICAgIGlmIChzZWxlY3RlZFdvcmtzcGFjZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBDb25maWcuc2V0TXVsdGlSb290V29ya3NwYWNlTmFtZShzZWxlY3RlZFdvcmtzcGFjZS5uYW1lKVxuICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiByZXNvbHZlKHNlbGVjdGVkV29ya3NwYWNlLnVyaS5mc1BhdGgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHdvcmtzcGFjZSBhbHJlYWR5IHNldCBieSBVc2VyXG4gICAgICAgIGlmIChDb25maWcuZ2V0TXVsdGlSb290V29ya3NwYWNlTmFtZSkge1xuICAgICAgICAgICAgLy8gQSBzbWFsbCB0ZXN0IHRoYXQgdGhlIFdvcmtzcGFjZU5hbWUgKHNldCBieSB1c2VyKSBpcyB2YWxpZFxuICAgICAgICAgICAgY29uc3QgdGFyZ2V0V29ya3NwYWNlID0gd29ya3NwYWNlRm9sZGVycy5maW5kKGUgPT4gZS5uYW1lID09PSBDb25maWcuZ2V0TXVsdGlSb290V29ya3NwYWNlTmFtZSk7XG4gICAgICAgICAgICBpZiAodGFyZ2V0V29ya3NwYWNlKVxuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHRhcmdldFdvcmtzcGFjZS51cmkuZnNQYXRoKTtcblxuICAgICAgICAgICAgLy8gcmVzZXQgd2hhdGV2ZXIgdXNlciBpcyBzZXQuXG4gICAgICAgICAgICBDb25maWcuc2V0TXVsdGlSb290V29ya3NwYWNlTmFtZShudWxsKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNob3cgYSBxdWljayBwaWNrZXJcbiAgICAgICAgc2V0T3JDaGFuZ2VXb3Jrc3BhY2UoKVxuICAgICAgICAgICAgLnRoZW4od29ya3NwYWNlTmFtZSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgd29ya3NwYWNlVXJpID0gd29ya3NwYWNlRm9sZGVycy5maW5kKGUgPT4gZS5uYW1lID09PSB3b3Jrc3BhY2VOYW1lKS51cmkuZnNQYXRoO1xuICAgICAgICAgICAgICAgIHJldHVybiByZXNvbHZlKHdvcmtzcGFjZVVyaSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9KTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/workspaceResolver.ts\n\n}");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = require("fs");

/***/ }),

/***/ "live-server":
/*!******************************!*\
  !*** external "live-server" ***!
  \******************************/
/***/ ((module) => {

"use strict";
module.exports = require("live-server");

/***/ }),

/***/ "path":
/*!***********************!*\
  !*** external "path" ***!
  \***********************/
/***/ ((module) => {

"use strict";
module.exports = require("path");

/***/ }),

/***/ "vscode":
/*!*************************!*\
  !*** external "vscode" ***!
  \*************************/
/***/ ((module) => {

"use strict";
module.exports = require("vscode");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/extension.ts");
/******/ 	module.exports = __webpack_exports__;
/******/ 	
/******/ })()
;